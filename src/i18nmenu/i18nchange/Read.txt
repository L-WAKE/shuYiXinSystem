<template>
    <div class="moduleDataSet flex">
        <div class="selected rel">
            <div class="selectScroll">
                <div class="classes" ref="drill"
                    v-if="dataSet.dataConfig.drillList && dataSet.dataConfig.drillList.length > 0 && dataSet.dataConfig.searchType == '0'">
                    <div class="classesName">
                        <span>{{ $t('i18n51') }}</span>
                    </div>
                    <div ref="selectedFilterList" class="classesContainer rel">
                        <ul class="selectedList drillUl rel" name="drillLists"
                            v-for="(listItem, index) in dataSet.dataConfig.drillList" :key="'drillList_' + index">
                            <li class="dimension" :index="index" v-for="(item, index2) in listItem.list"
                                :key="'drill_' + index2">
                                <i class="icon el-icon-setting vm"></i>
                                <span class="clumName2 vm" :title="item.colNameCn" v-text="item.colNameCn"></span>
                                <span class="clumSetOut tar dib abs">
                                    <i class="el-icon-close" :title="$t('delete')"
                                        @click="deleteDrillItem(listItem, index2)"></i>
                                </span>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="classes" ref="dimension" v-if="type != 'search' && type != 'text'">
                    <div class="classesName">
                        <!--                        <span v-if="type=='table'">行</span>-->
                        <!--                        <span v-else>类目/维度</span>-->
                        <span>{{ $t('i18n1075') }}/{{ $t('i18n250') }}</span>
                    </div>
                    <div ref="selectedDimensionList" class="classesContainer rel">
                        <div class="defaultText tac abs">
                            <span>{{ $t('i18n1076') }}</span>
                        </div>
                        <ul class="selectedList rel" name="selectedDimensionList">
                            <li :class="item.clumType" :index="index" v-for="(item, index) in dataSet.dataConfig.dimension"
                                v-dragging="{ item: item, list: dataSet.dataConfig.dimension, group: 'Dimension' }"
                                :key="'dimension' + index">
                                <i class="icon el-icon-orange vm"></i>
                                <span @dblclick.stop="showEditDimension(item)" v-if="dataSet.dataConfig.searchType == '0'"
                                    :class="[((dataSet.dataConfig.polOrDet == '-1') || ((item.isEnableDrill == undefined || item.isEnableDrill == false) && dataSet.dataConfig.polOrDet == '1')) && item.shortCode != '' ? 'clumName3 vm' : 'clumName vm']"
                                    :title="item.colNameCn" v-text="item.noteName || item.colNameCn"></span>

                                <span @dblclick.stop="showEditDimension(item)" v-if="dataSet.dataConfig.searchType == '1'"
                                    :class="[((dataSet.dataConfig.polOrDet == '-1') || ((item.isEnableDrill == undefined || item.isEnableDrill == false) && dataSet.dataConfig.polOrDet == '1')) && item.shortCode != '' ? 'clumName4 vm' : 'clumName vm']"
                                    :title="item.colNameCn" v-text="item.noteName || item.colNameCn"></span>
                                <span class="clumSetOut tar dib abs">
                                    <template v-if="item.clumType != 'sqlClum' && (type == 'table' || type=='summaryTable')">
                                        <el-dropdown size="mini" class="vm" trigger="click"
                                            v-if="(dataSet.dataConfig.polOrDet == '-1') || ((item.isEnableDrill == undefined || item.isEnableDrill == false) && dataSet.dataConfig.polOrDet == '1')"
                                            @command="selectGruop">
                                            <span class="el-dropdown-link">
                                                <i class="el-icon-files" v-if="item.group == ''"
                                                    :class="{ configured: item.group != '' }"></i>
                                                <i class="groupSelected2 tac" v-else v-text="item.shortCode"></i>
                                            </span>
                                            <el-dropdown-menu slot="dropdown">
                                                <el-dropdown-item
                                                    v-for="(group, index) in dataSet.dataConfig.dimFuncGroupList"
                                                    :key="'groupList' + index" :class="{ current: group.functionId == item.group }"
                                                    :command="[item, group.functionId, group.shortCode]"
                                                >{{group.functionName}}</el-dropdown-item>
                                            </el-dropdown-menu>
                                        </el-dropdown>
                                    </template>
                                    <!-- <i class="groupBy" :class="getGroupbyIcon(item)" title="聚合" @click="toggleGroupData(item,index)"></i> -->
                                    <i class="el-icon-s-data" :title="$t('i18n1848')" v-if="type=='summaryTable'"
                                        :class="{configured:!!item.isSubAggDim}"
                                        @click="toggleSubAgg(item)"
                                    ></i>
                                    <i class="el-icon-notebook-2" :title="$t('i18n1077')"
                                        v-if="dataSet.dataConfig.searchType == '0' && (dataSet.dataConfig.polOrDet == '-1' && (type == 'table')) || ((type == 'table') && item.group == '' && dataSet.dataConfig.polOrDet == '1')"
                                        :class="{ configured: !!item.isTreeData }" @click="toggleTreeData(item, index)"></i>
                                    <i class="iconfont icon-xiazuan" :title="$t('i18n51')"
                                        v-if="dataSet.dataConfig.searchType == '0' && (dataSet.dataConfig.polOrDet == '-1' && (type == 'table' || type == 'newTable')) || ((type == 'table' || type == 'newTable') && item.group == '' && dataSet.dataConfig.polOrDet == '1')"
                                        :class="{ configured: !!item.isEnableDrill }"
                                        @click="toggleEnableDrill(item, index)"></i>
                                    <i class="iconfont icon-sort-amount-desc" v-if="dataSet.dataConfig.searchType == '0' && index==0"
                                        :class="['icon-sort-amount-' + item.orderType, { configured: item.orderType != '' }]"
                                        :title="$t('sort')" @click="setOrderType(item)"></i>
                                    <i class="el-icon-close" :title="$t('delete')"
                                        @click.stop="deleteDimension(item, index)"></i>
                                </span>
                            </li>
                        </ul>
                        <i class="overlayer abs" :class="{ show: showOverLayer }" @drop="dropendDo('dimension', $event)"
                            @dragover="allowDrop"></i>
                    </div>
                </div>
                <div class="classes" ref="indicator" v-if="type != 'search' && dataSet.dataConfig.searchType != '-9'">
                    <div class="classesName">
                        <!--                        <span v-if="type=='table'">列</span>-->
                        <!--                        <span v-else>值/指标</span>-->
                        <span>{{ $t('i18n320') }}/{{ $t('i18n251') }}</span>
                    </div>
                    <div ref="selectedIndicatorList" class="classesContainer rel">
                        <div class="defaultText tac abs">
                            <span>{{ $t('i18n1078') }}</span>
                        </div>
                        <ul class="selectedList rel" name="selectedIndicatorList">
                            <li :class="item.clumType" :index="index" v-for="(item, index) in dataSet.dataConfig.indicator"
                                v-dragging="{ item: item, list: dataSet.dataConfig.indicator, group: 'indicator' }"
                                :key="'indicator' + index">
                                <i class="icon el-icon-data-analysis vm"></i>
                                <span @dblclick.stop="showEditDimension(item)"
                                    :class="[dataSet.dataConfig.searchType == '1' ? 'clumName4 vm' : 'clumName vm']"
                                    :title="item.colNameCn" v-text="item.noteName || item.colNameCn"></span>
                                <span class="clumSetOut tar dib abs">
                                    <template v-if="item.clumType != 'sqlClum'">
                                        <el-dropdown size="mini" class="vm" trigger="click" @command="selectGruop">
                                            <span class="el-dropdown-link">
                                                <i class="el-icon-files" v-if="item.group == ''"
                                                    :class="{ configured: item.group != '' }"></i>
                                                <i class="groupSelected tac" v-else v-text="item.shortCode"></i>
                                            </span>
                                            <el-dropdown-menu slot="dropdown">
                                                <el-dropdown-item v-for="(group, index) in dataSet.dataConfig.funcGroupList"
                                                    :key="'groupList' + index" :class="{ current: group.functionId == item.group }"
                                                    :command="[item, group.functionId, group.shortCode]"
                                                >{{group.functionName}}</el-dropdown-item>
                                            </el-dropdown-menu>
                                        </el-dropdown>
                                        <!-- <i class="el-icon-files" :class="{configured:item.group!=''}"></i>-->
                                        <i class="iconfont icon-sort-amount-desc" v-if="type!=='summaryTable'"
                                            :class="['icon-sort-amount-' + item.orderType, { configured: item.orderType != '' }]"
                                            :title="$t('sort')" @click="setOrderType(item)"></i>

                                    </template>
                                    <i class="el-icon-close" :title="$t('delete')"
                                        @click.stop="deleteIndicator('indicator', index)"></i>
                                </span>
                            </li>
                        </ul>
                        <i class="overlayer abs" :class="{ show: showOverLayer }" @drop="dropendDo('indicator', $event)"
                            @dragover="allowDrop"></i>
                    </div>
                </div>

                <div class="classes" ref="expression" v-if="(type == 'table'||type=='summaryTable') && dataSet.dataConfig.searchType == '0'">
                    <div class="classesName">
                        <span>{{ $t('i18n1079') }}</span>
                        <i :title="$t('i18n1080')" v-if="type == 'table'||type=='summaryTable'" class="addTemporaryGDL"
                            @click="showNewFieldDialog('gdl')">+</i>
                    </div>
                    <div ref="selectedIndicatorList" class="classesContainer rel">
                        <div class="defaultText tac abs">
                            <span>{{ $t('i18n1081') }}</span>
                        </div>
                        <ul class="selectedList rel" name="selectedIndicatorList">
                            <li :class="item.clumType" :index="index" v-for="(item, index) in dataSet.dataConfig.expression"
                                :key="'expression' + index">
                                <i :title="$t('i18n1082')" @click.stop="showNewFieldDialog('gdl', 'edit', item)"
                                    class="icon el-icon-edit vm" style="cursor:pointer;"></i>
                                <span @dblclick.stop="showEditDimension(item)" class="clumName vm" :title="item.colNameCn"
                                    v-text="item.noteName || item.colNameCn"></span>
                                <span class="clumSetOut tar dib abs">
                                    <el-dropdown size="mini" class="vm" trigger="click" @command="selectGruop">
                                        <span class="el-dropdown-link">
                                            <i class="el-icon-files" v-if="item.group == ''"
                                                :class="{ configured: item.group != '' }"></i>
                                            <i class="groupSelected tac" v-else v-text="item.shortCode"></i>
                                        </span>
                                        <el-dropdown-menu slot="dropdown">
                                            <el-dropdown-item v-for="(group, index) in dataSet.dataConfig.funcGroupList"
                                                :key="'groupList' + index" :class="{ current: group.functionId == item.group }"
                                                :command="[item, group.functionId, group.shortCode]"
                                            >{{group.functionName}}</el-dropdown-item>
                                        </el-dropdown-menu>
                                    </el-dropdown>
                                    <!--                                    <i class="el-icon-files" :class="{configured:item.group!=''}"></i>-->
                                    <i class="iconfont icon-sort-amount-desc" v-if="type!=='summaryTable'"
                                        :class="['icon-sort-amount-' + item.orderType, { configured: item.orderType != '' }]"
                                        :title="$t('sort')" @click="setOrderType(item)"></i>
                                    <i class="el-icon-close" :title="$t('delete')"
                                        @click.stop="deleteIndicator('expression', index)"></i>
                                </span>
                            </li>
                        </ul>
                        <!-- <i class="overlayer abs" :class="{ show: showOverLayer }" @drop="dropendDo('indicator', $event)"
                            @dragover="allowDrop"></i> -->
                    </div>
                </div>

                <div class="classes" ref="filter" v-if="dataSet.dataConfig.searchType == '0'">
                    <div class="classesName">
                        <span>{{ $t('i18n316') }}</span>
                    </div>
                    <div ref="selectedFilterList" class="classesContainer rel" v-if="type == 'search'">
                        <div class="defaultText tac abs">
                            <span>{{ $t('i18n1083') }}</span>
                        </div>
                        <ul class="selectedList rel" name="selectedFilterList" v-if="dataSet.dataConfig.filter[0]">
                            <li :class="item.clumType" :index="index"
                                v-for="(item, index) in dataSet.dataConfig.filter[0].config"
                                v-dragging="{ item: item, list: dataSet.dataConfig.filter[0].config, group: 'filter' }"
                                :key="'dataSetConfig' + index" @dblclick.stop="showEditDimension(item, false)">
                                <i class="icon el-icon-setting vm"></i>
                                <span class="clumName vm" v-text="item.noteName || item.colNameCn"></span>
                                <span class="clumSetOut tar dib abs">
                                    <i class="iconfont icon-guolv" :title="$t('i18n295')" @click="showFilterPop(index)"></i>
                                    <i class="el-icon-close" :title="$t('delete')" @click.stop="deleteFilter(index)"></i>
                                </span>
                            </li>
                        </ul>
                        <i class="overlayer abs" :class="{ show: showOverLayer }" @drop="dropendDo('filter', $event)"
                            @dragover="allowDrop"></i>
                    </div>
                    <el-button v-if="type != 'search'" type="info" size="mini" style="width: 205px;" @click="showFilterPop">{{
                        $t('i18n1084') }}
                    </el-button>
                </div>

                <div class="classes" ref="dynamicParameter"
                    v-if="type == 'search' && (!!dataSet.dataConfig.varNameMap && Object.keys(dataSet.dataConfig.varNameMap).length != 0)">
                    <div class="classesName">
                        <span>{{ $t('i18n1085') }}</span>
                        <i :title="$t('i18n1086')" class="addTemporaryGDL" @click="showDynamicParameterDialog('add')">+</i>
                    </div>
                    <div ref="selectedIndicatorList" class="classesContainer rel">
                        <div class="defaultText tac abs"
                            v-if="!dataSet.dataConfig.dyConfig || dataSet.dataConfig.dyConfig.length == 0">
                            <span>{{ $t('i18n1087') }}</span>
                        </div>
                        <ul class="selectedList rel" name="selectedIndicatorList">
                            <li class="expression" v-for="(item, index) in dataSet.dataConfig.dyConfig" :key="'dyc_' + index"
                                @dblclick.stop="showEditDy(item, false)">
                                <span class="clumName vm">{{ item.relationParamName || item.relationParamKey }}</span>
                                <span class="clumSetOut tar dib abs">
                                    <i class="el-icon-edit" :title="$t('edit')"
                                        @click.stop="showDynamicParameterDialog('edit', item)"></i>
                                    <i class="el-icon-close" :title="$t('delete')" @click.stop="deleteDyParam(index)"></i>
                                </span>

                            </li>
                        </ul>
                    </div>
                </div>

                <div class="classes" ref="filter" v-if="type == 'text' && dataSet.dataConfig.searchType != '-9'">
                    <div class="classesName">
                        <span>{{ $t('i18n1088') }}</span>
                    </div>
                    <el-input type="textarea" :placeholder="$t('i18n1089') + $t('i18n1090') + $t('i18n1091')"
                        :autosize="{ minRows: 5, maxRows: 5 }" max="1000" :clearable="true" resize="none"
                        v-model="chartDatas.currentModel.options.setData.textArea">
                    </el-input>
                </div>
                <div class="classes" ref="filter" v-if="type == 'text' && dataSet.dataConfig.searchType == '-9'">
                    <div class="classesName">
                        <span>{{ $t('i18n1092') }}</span>
                    </div>
                    <el-input type="textarea" :placeholder="$t('i18n3')" :autosize="{ minRows: 5, maxRows: 15 }" max="1000"
                        :clearable="true" resize="none" v-model="chartDatas.currentModel.options.setData.staticTxt">
                    </el-input>
                </div>
            </div>

            <div v-if="type != 'search'" class="confirm abs" :style="{ height: $i18n.locale == 'zh' ? '130px' : '160px' }">
                <div v-if="dataSet.dataConfig.searchType == '0'">
                    &nbsp;{{ $t('i18n1093') }}
                    <el-switch v-model="dataSet.dataConfig.polOrDet" active-value="1" inactive-value="-1" active-text=""
                        inactive-text="">
                    </el-switch>
                </div>
                <div v-if="type == 'table' || type=='summaryTable'" style="margin-top: 10px;">
                    &nbsp;{{ $t('i18n1094') }}
                    <el-switch v-model="dataSet.dataConfig.report.size" active-text="" inactive-text="">
                    </el-switch>
                </div>
                <div>
                    &nbsp;{{ $t('i18n1095') }}
                    <el-input type="number" v-model="dataSet.dataConfig.pageParam.pageSize"
                        :disabled="type == 'table' || type=='summaryTable'" size="mini" style="margin-top: 10px;"
                        :style="{ width: $i18n.locale == 'zh' ? '150px' : '125px' }" :placeholder="$t('i18n3')"></el-input>
                </div>
                <el-button class="abs" style="width:49%;bottom:0;left:0;" type="primary" @click="reflushData">{{
                    $t('i18n1096') }}
                </el-button>
                <el-button class="abs" style="width:49%;bottom:0;right:0;" type="primary" @click="StopReflushData">{{
                    $t('i18n1097') }}
                </el-button>
            </div>

        </div>
        <div class="optional">
            <div class="classesName" style="line-height: 10px;">
                <!-- <span>选择数据集</span>
                -->
                <template>
                    <el-select v-model="dataSet.dataConfig.searchType" :placeholder="$t('pleaseSelect')" size="mini"
                        style="width: 170px;">
                        <el-option key="0" :label="$t('dataSet')" value="0">
                        </el-option>
                        <!-- <el-option v-if="['search','newTable'].indexOf(chartDatas.currentModel.type)==-1"
                                key="1"
                                label="SQL"
                                value="1">
                        </el-option> -->
                        <el-option v-if="chartDatas.currentModel.type == 'text'" key="-9" :label="$t('i18n1098')" value="-9">
                        </el-option>
                    </el-select>
                </template>
                <el-tooltip v-if="dataSet.dataConfig.searchType == '0'" class="item" effect="light" :enterable="false"
                    :content="$t('i18n1099')" placement="top">
                    <i class="el-icon-circle-plus-outline vm" @click="openDatasetEdit2"></i>
                </el-tooltip>
                &nbsp;&nbsp;
                <!-- <el-tooltip class="item" effect="light" :enterable="false" content="SQL查询" placement="top">
                     <i  class="vm" style="cursor: pointer;" @click="openSqlDataEdit">SQL</i>
                 </el-tooltip>-->
            </div>
            <div class="dataSetList" style="width: 170px;margin-top: 10px;">
                <!-- <el-cascader
                        filterable
                        expand-trigger="hover"
                        class="vm"
                        style="width:180px;"
                        :show-all-levels=false
                        :options="datasetOptions"
                        v-model="dataSet.dataConfig.dataSetIdTree"
                        :props="{value: 'id',label: 'name',children:'child'}"
                        size="mini"
                >
                </el-cascader> -->
                <select-tree v-if="dataSet.dataConfig.searchType == '0'" @changeItem="changeDatasetId" ref="datasetTree"
                    v-model="dataSet.dataConfig.dataSetId" :options="datasetOptions"
                    :props="{ value: 'id', label: 'name', children: 'child' }" />
                <el-popover v-if="dataSet.dataConfig.searchType == '1'" placement="left-start" :title="'SQL' + $t('i18n17')"
                    width="300" trigger="hover">
                    <el-input slot="reference" type="textarea" v-model="dataSet.dataConfig.sql" readonly></el-input>
                </el-popover>

                <el-tooltip v-if="tableType != 4" class="item" style="margin-top: -44px;margin-left: 174px;" effect="light"
                    :enterable="false" :content="$t('edit')" placement="top">
                    <i class="el-icon-edit vm" @click="openDatasetEdit"></i>
                </el-tooltip>
            </div>

            <div class="filterField">
                <input type="text" name="filterKey" v-model="dataSetItemFilterKey" :placeholder="$t('pleaseEnterContent')"
                    class="filterKey vm" />
                <!--<i class="el-icon-search vm"></i>-->
            </div>
            <div class="showFields">
                <template v-if="dataSet.dataConfig.searchType == '0'">
                    <div class="fieldsList" ref="outDimension">
                        <div class="classesName">
                            <span><el-checkbox v-model="checkDimAll" size="mini" :indeterminate="isIndeterDim"
                                    v-show="isDisabled('dimAll') && type != 'search'"
                                    @change="(val) => handleCheckAllChange('dim', val)"></el-checkbox>{{ $t('i18n250') }}
                                <span v-show="isDisabled('dimAll') && type != 'search'"> {{ $t('i18n1100')
                                }}({{ checkedDims.length }})</span>
                                <span class="right-tools" v-if="type != 'search'">
                                    <el-divider direction="vertical"></el-divider>
                                    <el-tooltip :content="$t('i18n1101')" placement="top">
                                        <i class="icon-btn el-icon-position" @click="col2out('dim', $event)"></i>
                                    </el-tooltip>
                                </span>
                            </span>
                        </div>
                        <div class="outList rel" name="outIndicatorList">
                            <el-checkbox-group v-model="checkedDims" @change="(val) => handleCheckedGdlChange('dim', val)"
                                :key="'dimGroup_check' + index">
                                <template v-for="(item, index) in getDataForDimension">
                                    <div name="outListGroup" :key="'dimGroup_' + index" :title="item.groupName"
                                        class="group dimension dimGroup" v-if="item.clumType == 'group'"
                                        @click="toggleDimLevelItems(item)">
                                        <i class="icon vm"
                                            :class="{ 'el-icon-plus': !item.status, 'el-icon-minus': item.status }"></i>
                                        <span style="width:160px;" class="clumName vm" v-text="item.groupName"></span>
                                    </div>
                                    <template
                                        v-if="item.clumType != 'group' && item.colNameCn.indexOf(dataSetItemFilterKey) > -1">
                                        <div name="outListItem" :class="item.clumType" :index="index"
                                            :title="item.reMark || item.colNameCn"
                                            :style="{ 'margin-left': !item.groupflag ? '10px' : '15px' }" v-show="item.show"
                                            :key="'getDataForDimension' + index" draggable="true"
                                            @dragstart="dragStart(item)">
                                            <el-checkbox :key="item.colId" :label="item.colId" size="mini"
                                                v-show="isDisabled('dim', item.colId) && type != 'search'">{{ "" }}</el-checkbox>
                                            <i class="icon el-icon-orange vm"></i>
                                            <span :style="{ width: isDisabled('dim', item.colId) ? '130px' : '150px' }"
                                                class="clumName vm" v-text="item.colNameCn"></span>
                                        </div>
                                    </template>
                                </template>
                            </el-checkbox-group>
                        </div>
                    </div>
                    <div class="handle tac">
                        <i draggable="true" @dragstart="handleDragStart" @drag="handleDragging"></i>
                    </div>
                    <div class="fieldsList" ref="outIndicator">
                        <div class="classesName">
                            <span>
                                <el-checkbox v-model="checkGdlAll" size="mini" v-show="isDisabled('gdlAll') && type != 'search'"
                                    :indeterminate="isIndeterGdl"
                                    @change="(val) => handleCheckAllChange('gdl', val)"></el-checkbox>{{ $t('i18n251') }}<span
                                    v-show="isDisabled('gdlAll') && type != 'search'"> {{ $t('i18n1100')
                                    }}({{ checkedGdls.length }})</span>
                                <span class="right-tools" v-if="type != 'search'">
                                    <el-divider direction="vertical"></el-divider>
                                    <el-tooltip :content="$t('i18n1102')" placement="top">
                                        <i class="icon-btn el-icon-position" @click="col2out('gdl', $event)"></i>
                                    </el-tooltip>
                                </span>
                            </span>
                        </div>
                        <div class="outList rel" name="outIndicatorList">
                            <el-checkbox-group v-model="checkedGdls" @change="(val) => handleCheckedGdlChange('gdl', val)"
                                :key="'getDataForIndicator_check' + index">
                                <template v-for="(item, index) in getDataForIndicator">
                                    <div name="outListItem"
                                        :class="[item.clumType, isDisabled('gdl', item.colId) ? '' : 'disableSelect']"
                                        :index="index" v-if="item.colNameCn.indexOf(dataSetItemFilterKey) > -1"
                                        :title="item.des || item.colNameCn" :key="'getDataForIndicator' + index"
                                        draggable="true" @dragstart="dragStart(item)">
                                        <el-checkbox :key="item.colId" :label="item.colId" size="mini"
                                            v-show="isDisabled('gdl', item.colId) && type != 'search'">{{ "" }}</el-checkbox>
                                        <i class="icon el-icon-data-analysis vm"></i>
                                        <span style="width:140px;" class="clumName vm" v-text="item.colNameCn"></span>
                                    </div>
                                </template>
                            </el-checkbox-group>
                        </div>
                    </div>
                </template>
                <!--sql字段输出-->
                <template v-if="dataSet.dataConfig.searchType == '1'">
                    <div class="fieldsList">
                        <div class="classesName">
                            <span>{{ $t('i18n1103') }}</span>
                        </div>
                        <div class="outList rel" name="outIndicatorList">
                            <template v-for="(item, index) in sqlOutClumsSession[chartDatas.currentModel.id]">
                                <div name="outListItem" :index="index" v-if="item.name.indexOf(dataSetItemFilterKey) > -1"
                                    :title="item.name" style="margin-left:20px;" :key="'sqlOutClums_' + index"
                                    draggable="true" @dragstart="dragStart(item)">
                                    <i class="icon el-icon-menu vm"></i>
                                    <span style="width:120px;" class="clumName vm" v-text="item.name"></span>
                                </div>
                            </template>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!--showControlClumFilter-->
        <el-dialog :title="$t('i18n1104')" custom-class="filterPop" :visible.sync="filtersConfig.showControlClumFilter"
            width="900px" max-height="60%" :modal=false :close-on-click-modal=false @close="clearFilterItemData">
            <div style="height: 100%;overflow-y: auto;" v-if="filtersConfig.showControlClumFilter">
                <el-collapse accordion v-model="filterClumsIndex">
                    <template v-if="dataSet.dataConfig.filter[0]">
                        <el-collapse-item :name="index1" v-for="(filterItem, index1) in dataSet.dataConfig.filter"
                            :key="'dataConfigFilter' + index1">
                            <template slot="title">
                                <div class="flexBox groupBox">
                                    <div class="alignLeft">
                                        <span style="margin-right:10px">{{ $t('i18n457') + (index1 + 1) }}</span>
                                    </div>
                                    <!-- <el-input class="tint"  v-model="filterItem.groupName" placeholder="请输入名称" size="mini"
                                            style="width: 200px;"></el-input> -->
                                    <div class="alignRight flexBox">
                                        <div class="alignLeft">
                                            <span v-if="index1 < dataSet.dataConfig.filter.length - 1">{{ $t('i18n1105')
                                            }}</span>
                                            <el-select class="tint" v-if="index1 < dataSet.dataConfig.filter.length - 1"
                                                v-model="filterItem.groupGroupLogicType" :placeholder="$t('pleaseSelect')"
                                                size="mini" style="width: 60px;">
                                                <el-option v-for="filterLogicListItem in filterLogicList"
                                                    :key="'filterLogicListItem' + filterLogicListItem.code"
                                                    :label="filterLogicListItem.name" :value="filterLogicListItem.code">
                                                </el-option>
                                            </el-select>
                                        </div>
                                        <div class="alignRight">
                                            <i class="iconbtn el-icon-plus" style="margin:0 10px 0 30px"
                                                @click.stop="addFilterData(index1)" :title="$t('i18n456')"></i>
                                            <i class="iconbtn el-icon-delete" :title="$t('i18n459')"
                                                @click.stop="deleteFilterData(index1)"></i>
                                        </div>
                                    </div>
                                </div>
                                <!-- <el-button @click.stop="addFilterData(index1)" type="primary" icon="el-icon-circle-plus"
                                        size="small" circle
                                        style="margin-left: 360px;"></el-button>
                                <el-button v-if="index1>0" @click.stop="deleteFilterData(index1)" type="danger"
                                        icon="el-icon-delete" size="small" circle></el-button> -->
                            </template>
                            <div class="clumsFilterClass flexBox" v-for="(configItem, index2) in filterItem.config"
                                :key="'filterItemConfig1' + index2">
                                <!--字段变化-->
                                <div class="alignLeft">
                                    <i
                                        :class="{ 'titleIcon': true, 'el-icon-orange': configItem.clumType == 'dimension', 'el-icon-data-analysis': configItem.clumType != 'dimension' }"></i>
                                    <el-select class="tint"
                                        :disabled="configItem.condition[0].dimPartitionFlag == '1' ? 'disabled' : false"
                                        @change="configItemClumChange(index1, index2)" v-model="configItem.colId"
                                        :placeholder="$t('i18n1106')" size="mini" filterable
                                        style="width: 170px;margin-left: 10px;">
                                        <template v-for="(getDataForDimensionItem, index3) in getDataForDimension">
                                            <el-option v-if="getDataForDimensionItem.clumType != 'group'"
                                                :key="'getDataForDimensionItem' + index3"
                                                :label="getDataForDimensionItem.noteName || getDataForDimensionItem.colNameCn"
                                                :value="getDataForDimensionItem.colId"></el-option>
                                        </template>
                                        <el-option v-for="(getDataForIndicatorItem, index4) in getDataForIndicator"
                                            :key="'getDataForIndicatorItem' + index4"
                                            :label="getDataForIndicatorItem.noteName || getDataForIndicatorItem.colNameCn"
                                            :value="getDataForIndicatorItem.colId"></el-option>
                                        <el-option v-for="(getDataForExpressionItem, index4) in getDataForExpression"
                                            :key="'getDataForExpressionItem' + index4"
                                            :label="getDataForExpressionItem.noteName || getDataForExpressionItem.colNameCn"
                                            :value="getDataForExpressionItem.colId"></el-option>
                                    </el-select>
                                    <!--逻辑条件-->
                                    <el-select class="tint" v-model="configItem.condition[0].conditionOperator"
                                        @change="changeValuesType($event, configItem.condition[0])"
                                        :placeholder="$t('pleaseSelect')" size="mini"
                                        style="width: 100px;margin-left: 10px;">
                                        <template
                                            v-if="configItem.condition[0].conditionValueType == '-1' && configItem.clumType != 'indicator' && configItem.clumType != 'expression'">
                                            <template
                                                v-if="['10', '11', '12'].some(item => item == valueCtrTypeByDimLevelId[configItem.colId] + '')">
                                                <el-option
                                                    v-for="(searchFilterOptionsMapItem, index5) in filtersConfig.searchFilterOptionsMap[valueCtrTypeByDimLevelId[configItem.colId] + ''].filter((item, index) => index == 0) || filtersConfig.searchFilterOptionsMap['defual']"
                                                    :key="'searchFilterOptionsMapItem' + index5"
                                                    :label="searchFilterOptionsMapItem.name"
                                                    :value="searchFilterOptionsMapItem.conditionOperator"></el-option>
                                            </template>
                                            <template v-else>
                                                <el-option
                                                    v-for="(searchFilterOptionsMapItem, index5) in filtersConfig.searchFilterOptionsMap[valueCtrTypeByDimLevelId[configItem.colId] + ''] || filtersConfig.searchFilterOptionsMap['defual']"
                                                    :key="'searchFilterOptionsMapItem' + index5"
                                                    :label="searchFilterOptionsMapItem.name"
                                                    :value="searchFilterOptionsMapItem.conditionOperator"></el-option>
                                            </template>
                                        </template>
                                        <template
                                            v-if="configItem.condition[0].conditionValueType == '-1' && (configItem.clumType == 'indicator' || configItem.clumType == 'expression')">
                                            <el-option
                                                v-for="(searchFilterOptionsMapItem, index6) in filtersConfig.searchFilterOptionsMap['indicator']"
                                                :key="'searchFilterOptionsMapItem' + index6"
                                                :label="searchFilterOptionsMapItem.name"
                                                :value="searchFilterOptionsMapItem.conditionOperator"></el-option>
                                        </template>
                                        <template v-if="configItem.condition[0].conditionValueType == '1'">
                                            <el-option
                                                v-for="(searchFilterOptionsMapItem, index7) in filtersConfig.searchFilterOptionsMap['file']"
                                                :key="'searchFilterOptionsMapItem' + index7"
                                                :label="searchFilterOptionsMapItem.name"
                                                :value="searchFilterOptionsMapItem.conditionOperator"></el-option>
                                        </template>
                                        <template v-if="configItem.condition[0].conditionValueType == '2'">
                                            <el-option
                                                v-for="(searchFilterOptionsMapItem, index8) in  filtersConfig.searchFilterOptionsMap['defual']"
                                                :key="'searchFilterOptionsMapItem' + index8"
                                                :label="searchFilterOptionsMapItem.name"
                                                :value="searchFilterOptionsMapItem.conditionOperator"></el-option>
                                        </template>
                                    </el-select>
                                    <!--文件切换-->
                                    <el-select class="tint"
                                        @change="function () { configItem.condition[0].conditionOperator = ''; configItem.condition[0].values = '' }"
                                        v-model="configItem.condition[0].conditionValueType" slot="prepend"
                                        :placeholder="$t('i18n162')" size="mini" style="width: 100px;margin-left: 10px;">
                                        <el-option :label="$t('i18n163')" value="-1"></el-option>
                                        <el-option v-if="configItem.clumType == 'dimension'" :label="$t('i18n164')"
                                            value="1"></el-option>
                                        <el-option :label="$t('i18n1107')" value="2"></el-option>
                                    </el-select>
                                    <!--一般输入框-->
                                    <el-input v-model="configItem.condition[0].values"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && (valueCtrTypeByDimLevelId[configItem.colId] + '' == '0' || !valueCtrTypeByDimLevelId[configItem.colId])"
                                        :placeholder="$t('i18n3')" size="mini" class="tint"
                                        style="width: 170px;margin-left: 10px;"></el-input>
                                    <!--下拉选情况 in notin-->
                                    <template>
                                        <el-select class="tint" clearable filterable multiple
                                            :multiple-limit="configItem.condition[0].conditionOperator == 'IN' || configItem.condition[0].conditionOperator == 'NOTIN' ? 0 : 1"
                                            v-model="configItem.condition[0].values" size="mini"
                                            v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '1' && configItem.dimScale && configItem.dimScale < limitSize"
                                            style="width:170px;margin-left: 10px;">
                                            <el-option
                                                v-for="dimensionOptionSessionItem in dimensionOptionSession[configItem.dimId + '_' + configItem.dimLevel]"
                                                :key="'dimensionOptionSessionItem' + dimensionOptionSessionItem.code"
                                                :label="dimensionOptionSessionItem.name"
                                                :value="dimensionOptionSessionItem.code">
                                            </el-option>
                                        </el-select>

                                        <el-select
                                            v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '1' && configItem.dimScale && configItem.dimScale >= limitSize"
                                            v-model="configItem.condition[0].values" multiple
                                            :multiple-limit="configItem.condition[0].conditionOperator == 'IN' || configItem.condition[0].conditionOperator == 'NOTIN' ? 0 : 1"
                                            @change="saveSelect($event, configItem, configItem.dimId + '_' + configItem.dimLevel)"
                                            filterable remote reserve-keyword :placeholder="$t('i18n165')"
                                            :remote-method="(val) => remoteMethod(val, configItem.dimId, configItem.dimLevel, configItem.colId)"
                                            style="width:170px;margin-left: 10px;" :loading="conditionLoading">
                                            <el-option
                                                v-for="option in unionList(configItem, dimensionOptionSession[configItem.dimId + '_' + configItem.dimLevel])"
                                                :key="option.code" :label="option.name" :value="option.code">
                                            </el-option>
                                        </el-select>

                                        <el-select class="textOver" v-if="configItem.condition[0].conditionValueType == '2'"
                                            v-model="configItem.condition[0].values" multiple
                                            :multiple-limit="configItem.condition[0].conditionOperator == 'IN' || configItem.condition[0].conditionOperator == 'NOTIN' ? 0 : 1"
                                            filterable remote reserve-keyword :placeholder="$t('i18n165')"
                                            style="width:170px;margin-left: 10px;" :loading="conditionLoading">
                                            <el-option v-for="option in  setRepStyle.reportParam || []" :key="option.name"
                                                :label="option.name" :value="option.name">
                                            </el-option>
                                        </el-select>

                                    </template>

                                    <!--其他-->
                                    <!-- <template v-if="configItem.condition[0].conditionOperator != 'IN' && configItem.condition[0].conditionOperator != 'NOTIN'">
                                        <el-select  class="tint" clearable filterable
                                                    collapse-tags
                                                    v-model="configItem.condition[0].values" size="mini"
                                                    v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId]+''=='1'"
                                                    style="width:160px;margin-left: 10px;"
                                        >
                                            <el-option
                                                    v-for="dimensionOptionSessionItem in dimensionOptionSession[configItem.dimId+'_'+configItem.dimLevel]"
                                                    :key="'dimensionOptionSessionItem'+dimensionOptionSessionItem.code"
                                                    :label="dimensionOptionSessionItem.name"
                                                    :value="dimensionOptionSessionItem.code">
                                            </el-option>
                                        </el-select>
                                    </template> -->

                                    <!--日期情况 start-->
                                    <el-date-picker class="tint" v-model="configItem.condition[0].values"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '10' && configItem.condition[0].conditionOperator != 'NOTIN' && configItem.condition[0].conditionOperator != 'IN'"
                                        type="year" value-format="yyyy" size="mini" :placeholder="$t('i18n158')"
                                        style="width: 170px;margin-left: 10px;">
                                    </el-date-picker>
                                    <el-date-picker class="tint" v-model="configItem.condition[0].values"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '11' && configItem.condition[0].conditionOperator != 'NOTIN' && configItem.condition[0].conditionOperator != 'IN'"
                                        type="month" size="mini" value-format="yyyyMM" :placeholder="$t('i18n159')"
                                        style="width: 170px;margin-left: 10px;">
                                    </el-date-picker>
                                    <el-date-picker class="tint" v-model="configItem.condition[0].values"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '12' && configItem.condition[0].conditionOperator != 'NOTIN' && configItem.condition[0].conditionOperator != 'IN'"
                                        type="date" size="mini" value-format="yyyyMMdd" :placeholder="$t('i18n160')"
                                        style="width: 170px;margin-left: 10px;">
                                    </el-date-picker>
                                    <select-date class="tint"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '10' && (configItem.condition[0].conditionOperator == 'NOTIN' || configItem.condition[0].conditionOperator == 'IN')"
                                        @dateChange="filterChangeDate" :styleObj="{ width: '140px', marginLeft: '10px' }"
                                        :paramOpt="{ groupIndex: index1, conditionIndex: index2 }"
                                        :dateModel="configItem.condition[0].values" datetype="year"
                                        valueType="array"></select-date>
                                    <select-date class="tint"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '11' && (configItem.condition[0].conditionOperator == 'NOTIN' || configItem.condition[0].conditionOperator == 'IN')"
                                        @dateChange="filterChangeDate" :styleObj="{ width: '140px', marginLeft: '10px' }"
                                        :paramOpt="{ groupIndex: index1, conditionIndex: index2 }"
                                        :dateModel="configItem.condition[0].values" datetype="month"
                                        valueType="array"></select-date>
                                    <select-date class="tint"
                                        v-if="configItem.condition[0].conditionValueType == '-1' && valueCtrTypeByDimLevelId[configItem.colId] + '' == '12' && (configItem.condition[0].conditionOperator == 'NOTIN' || configItem.condition[0].conditionOperator == 'IN')"
                                        @dateChange="filterChangeDate" :styleObj="{ width: '140px', marginLeft: '10px' }"
                                        :paramOpt="{ groupIndex: index1, conditionIndex: index2 }"
                                        :dateModel="configItem.condition[0].values" datetype="date"
                                        valueType="array"></select-date>
                                    <!--日期情况结束-->

                                    <el-button v-if="configItem.condition[0].conditionValueType == '1'" type="primary"
                                        size="mini" icon="el-icon-document"
                                        style="width: 170px;margin-left: 10px;height: 28px;" class="fileNameSpan"
                                        :title="configItem.condition[0].fileValue.fileName || $t('i18n27')"
                                        @click="showFilterFileWindow(configItem.condition[0])">
                                        {{ configItem.condition[0].fileValue.fileName || $t('i18n27') }}
                                    </el-button>
                                    <!--<el-select class="tint"
                                               v-model="configItem.condition[0].filterLevel" :placeholder="$t('i18n1108')"
                                               size="mini" style="width: 95px;margin-left: 20px;">
                                        <el-option
                                                v-for="filterLogicListItem in filterhavingorwhere"
                                                :key="'filterLogicListItem'+filterLogicListItem.code"
                                                :label="filterLogicListItem.name"
                                                :value="filterLogicListItem.code">
                                        </el-option>
                                    </el-select>-->
                                    <el-select class="tint" v-if="index2 < filterItem.config.length - 1"
                                        v-model="configItem.condition[0].groupInnerLogicType" :placeholder="$t('i18n1108')"
                                        size="mini" style="width: 75px;margin-left: 20px;">
                                        <el-option v-for="filterLogicListItem in filterLogicList"
                                            :key="'filterLogicListItem' + filterLogicListItem.code"
                                            :label="filterLogicListItem.name" :value="filterLogicListItem.code">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="alignRight">
                                    <!--必选条件时不允许删除，自动生成不能删除，用户操作添加可以删除   checkFilterType(configItem)-->
                                    <i v-if="configItem.condition[0].dimPartitionFlag != '1'" class="iconbtn el-icon-delete"
                                        :title="$t('i18n335')" @click="deleteClumFilterData(index1, index2)"
                                        style="margin-right:16px"></i>
                                </div>
                            </div>
                            <div>
                                <el-button @click="addClumFilterData(index1)" type="primary" icon="el-icon-plus"
                                    size="mini">{{ $t('i18n1109') }}
                                </el-button>
                            </div>

                        </el-collapse-item>
                    </template>
                </el-collapse>
                <el-collapse accordion v-model="filterClumsIndex2"
                    v-if="!!dataSet.dataConfig.varNameMap && Object.keys(dataSet.dataConfig.varNameMap).length != 0">
                    <el-collapse-item :name="1" :title="$t('i18n1110')">
                        <template v-if="!!dataSet.dataConfig.dyConfig">
                            <div class="clumsFilterClass flexBox" v-for="(dyFilter, idx) in dataSet.dataConfig.dyConfig"
                                :key="'dyf_' + idx">
                                <div>
                                    <i class="titleIcon el-icon-paperclip"></i>
                                    <el-select class="tint" v-model="dyFilter.relationParamKey" size="mini" filterable
                                        style="width: 170px;margin-left: 10px;">
                                        <el-option v-for="(item, index) in getDynamicParams" :key="'dy_key_' + index"
                                            :label="item.label" :value="item.value"></el-option>
                                    </el-select>
                                    <el-select class="tint" v-model="dyFilter.relationParamTarget" size="mini" filterable
                                        style="width: 170px;margin-left: 10px;">
                                        <el-option v-for="option in  setRepStyle.reportParam || []" :key="option.name"
                                            :label="option.name" :value="option.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div>
                                    <i class="iconbtn el-icon-delete" :title="$t('i18n1111')"
                                        @click="deleteDyFilterData(idx)" style="margin-right:16px"></i>
                                </div>
                            </div>
                        </template>
                        <div>
                            <el-button @click="addDyFilterData" type="primary" icon="el-icon-plus" size="mini">{{
                                $t('i18n1112') }}
                            </el-button>
                        </div>
                    </el-collapse-item>

                </el-collapse>
            </div>
        </el-dialog>

        <!--修改维度备注弹出框-->
        <el-dialog :title="$t('i18n1113') + columIemVal.colNameCn + '】'" :visible.sync="isShowEditDimension" width="460px"
            @close="reName(columIemVal)">
            <div style="width: 420px;">
                <el-form ref="form" :model="columIemVal" label-width="80px" size="mini" >
                    <el-form-item :label="$t('i18n1114')">
                        <el-input v-model="columIemVal.colNameCn" :disabled="true"  class="noChange"></el-input>
                    </el-form-item>
                    <el-form-item :label="$t('i18n1115')">
                        <el-input v-model="columIemVal.noteName"  class="noChange"></el-input>
                    </el-form-item>
                    <el-form-item :label="$t('i18n329')"  v-if="columIemVal.clumType == 'indicator' && !!isCanEditAccuracy">
                        <el-input v-model="columIemVal.precision"   class="noChange"  type="number" min="0" max="10"></el-input>
                    </el-form-item>
                    <el-form-item label="提示开关:">
                        <el-switch
                            v-model="columIemVal.showRemark"
                            active-color="#13ce66"
                            inactive-color="#ff4949">
                        </el-switch>
                    </el-form-item>
                    <el-form-item label="备注信息:" v-show="columIemVal.showRemark">
                        <el-input v-model="columIemVal.noteNameRemark" type="textarea" maxlength="500" ></el-input>
                    </el-form-item>
                </el-form>
                <!-- <el-input v-model="columIemVal.colNameCn" id="oldColNameCn" maxlength="25" :disabled="true" size="mini">
                    <template slot="prepend"><span style="width:50px;display:inline-block">{{ $t('i18n1114')
                    }}</span></template>
                </el-input>
                <el-input v-model.trim="columIemVal.noteName" id="newNoteName" style="margin-top: 5px;" maxlength="25"
                    size="mini">
                    <template slot="prepend"><span style="width:50px;display:inline-block">{{ $t('i18n1115')
                    }}</span></template>
                </el-input>
                <el-input v-model="columIemVal.precision" v-if="columIemVal.clumType == 'indicator' && !!isCanEditAccuracy"
                    class="noChange" size="mini" type="number" min="0" max="10" id="gdlFormate" style="margin-top: 5px;"
                    maxlength="25">
                    <template slot="prepend"><span style="width:50px;display:inline-block">{{ $t('i18n329') }}
                        </span></template>
                </el-input>
                <el-input v-model.trim="dyIemVal.relationParamMarsk" id="noteNameMarsk" style="margin-top: 5px;height:50px" maxlength="500"
                 class="noChange"
                    size="mini">
                    <template slot="prepend"><span style="width:50px;height:50px;display:inline-block">备注信息:</span></template>
                </el-input> -->
            </div>
            <span slot="footer" class="dialog-footer">
            </span>
        </el-dialog>


        <!--查询控件过滤条件-->
        <el-dialog :title="$t('i18n1118')" custom-class="filterPop" :visible.sync="filtersConfig.searchShow"
            :width="setPopWidth(type)" height="60%" :close-on-click-modal=false @close="saveFilterDataToChart"
            class="change-input-icon">
            <el-row style="height:100%;" :gutter="20" v-if="filtersConfig.searchShow">
                <el-col class="filterFieldList" :span="5">
                    <span class="popFieldHead">{{ $t('i18n1119') }}</span>
                    <ul class="filterList">
                        <li name="filterItem"
                            :class="{ animation: true, dimLi: item.clumType == 'dimension', gdlLi: item.clumType == 'indicator', filterItemActive: item.colId == filtersConfig.filterItem.colId }"
                            @click="selectSearchThisFilterItem(item)"
                            v-for="(item, index) in dataSet.dataConfig.filter[0].config" :key="index">
                            <i
                                :class="{ colIcon: true, 'el-icon-orange': item.clumType == 'dimension', 'el-icon-data-analysis': item.clumType == 'indicator' }"></i>
                            <i class="el-icon-success" v-if="item.isCover == '1'" style="color:#67c23A;"
                                @click="changeValue(item)" :title="$t('i18n1120')"></i>
                            <i class="el-icon-success" v-if="item.isCover == '0' || item.isCover == undefined" style="color:gray;"
                                @click="changeValue(item)" :title="$t('i18n1120')"></i>
                            <span>{{ item.noteName || item.colNameCn }}</span>
                        </li>
                    </ul>
                </el-col>
                <el-col v-if="'search' == type" class="filterConfigList" :span="6">
                    <span class="popFieldHead">{{ $t('i18n1121') }}</span>
                    <el-table ref="multipleTable" :data="filtersConfig.showFilterCharts" tooltip-effect="dark"
                        style="width: 100%">
                        <el-table-column width="55" :label="$t('i18n166')" align="center">
                            <template slot-scope="scope">
                                <i @click="unionCharChange(scope)" style="color: #2bc048;font-size: 18px;cursor:pointer"
                                    :class="{ 'selectIcon': true, 'iconfont': true, 'icon-weixuan': !scope.row.selected, 'icon-quanxuan': scope.row.selected }"></i>
                            </template>
                        </el-table-column>
                        <el-table-column prop="global.name" :label="$t('i18n1122')" align="left">
                            <template slot-scope="scope">
                                <div class="flexBox start">
                                    <div class="iconBox">

                                    </div>
                                    <div v-if="scope.row.type != 'table'" class="nameBox">{{ scope.row.global.name }}</div>
                                    <div v-else class="nameBox">{{ scope.row.tableName || scope.row.global.name }}</div>
                                    <div v-if="dataSet.dataConfig.dataSetId != scope.row.options.setData.dataConfig.dataSetId"
                                        class="config-box">
                                        <el-popover placement="right" trigger="click">
                                            <div class="colSelect">
                                                <div class="colSelect-title">配置同源关联字段</div>
                                                <div class="param-box">
                                                    <div class="param-label">关联字段:</div>
                                                    <div class="param-value">
                                                        <el-select v-model="filtersConfig.filterItem['relation']" clearable
                                                            size="mini" class="tint noChange">
                                                            <template  v-for="dimCol in scope.row.options.setData.dataConfig.dimension">
                                                                <el-option
                                                               v-if="filtersConfig.filterItem.systemDimId==dimCol.systemDimId"
                                                               :label="dimCol.noteName || dimCol.colNameCn"
                                                               :value="dimCol.colId"
                                                               :key="dimCol.dimId + '_' + dimCol.dimLevelId">
                                                           </el-option>
                                                            </template>

                                                        </el-select>
                                                    </div>
                                                </div>

                                            </div>
                                            <i class="el-icon-setting" slot="reference"></i>

                                        </el-popover>


                                    </div>
                                </div>
                            </template>
                        </el-table-column>
                    </el-table>
                </el-col>
                <el-col class="filterConfigList" :span="type == 'search' ? 13 : 19">
                    <span class="popFieldHead">{{ $t('i18n1123') }}</span>
                    <el-tabs @tab-click="changeTabItem" v-model="filtersConfig.filterItem.filterCheckType">
                        <el-tab-pane :label="$t('i18n1124')" name="1">
                            <template v-if="filtersConfig.filterData.length > 0">
                                <div class="filterConfigList_tab1" style="margin-top:8px;"
                                    v-for="(item, index) in filtersConfig.filterData" :key="'filterDataA_' + index">
                                    <span>{{ $t('i18n157') }}</span>
                                    <el-switch v-model="item.isfill"></el-switch>
                                    <el-select class="tint noChange" size="mini" v-model="item.conditionOperator"
                                        slot="prepend" @change="changeValuesType($event, item)" :placeholder="$t('i18n1125')"
                                        style="width: 80px;vertical-align:middle">
                                        <template v-if="item.conditionValueType == '-1'">
                                            <el-option v-bind:value="optionItem.conditionOperator"
                                                v-bind:label="optionItem.name"
                                                v-for="(optionItem, index) in searchFilterOptions" :key="'optionItem' + index">
                                                {{ optionItem.name }}
                                            </el-option>
                                        </template>
                                        <template v-if="item.conditionValueType == '1'">
                                            <el-option v-bind:value="optionItem.conditionOperator"
                                                v-bind:label="optionItem.name"
                                                v-for="(optionItem, index) in operatorbylabel['file_level_*']"
                                                :key="'optionItem' + index">
                                                {{ optionItem.name }}
                                            </el-option>
                                        </template>
                                    </el-select>
                                    <!-- <el-select class="tint noChange"
                                               @change="function() {item.values='';item.conditionOperator=''}"
                                               slot="prepend"
                                               v-model="item.conditionValueType"
                                               :placeholder="$t('i18n162')" size="mini" style="width: 90px;display: none;">
                                        <el-option :label="$t('i18n163')" value="-1"></el-option>
                                        <el-option v-if="filtersConfig.filterItem.clumType == 'dimension'" :label="$t('i18n164')"
                                                   value="1"></el-option>
                                    </el-select> -->
                                    <el-select class="tint noChange"
                                        v-if="filtersConfig.filterItem.clumType != 'indicator' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '1'"
                                        v-model="item.showType" @change="handleChangeSelectType(item)"
                                        style="width:80px;vertical-align:middle">
                                        <el-option :label="$t('i18n1126')" value="1"></el-option>
                                        <el-option :label="$t('i18n1127')" value="2"></el-option>
                                    </el-select>
                                    <template v-if="item.conditionValueType == '-1'">
                                        <!--一般输入框-->
                                        <el-input class="tint noChange" v-model="item.values" v-if="item.conditionValueType == '-1' &&
                                            (valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '0' ||
                                                !valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId])"
                                            :placeholder="$t('i18n3')" size="mini"
                                            style="width: 170px;vertical-align:middle"></el-input>
                                        <template v-if="item.showType == '1'">
                                            <!--下拉选情况-->
                                            <el-select class="tint noChange" clearable v-model="item.values" size="mini"
                                                multiple filterable collapse-tags
                                                :multiple-limit="item.conditionOperator == 'IN' || item.conditionOperator == 'NOTIN' ? 0 : 1"
                                                v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '1' && dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel] + '' != '-1' && filtersConfig.filterItem.dimScale && filtersConfig.filterItem.dimScale < limitSize"
                                                style="width: 170px;vertical-align:middle">
                                                <el-option
                                                    v-for="item in dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel]"
                                                    :key="'dimensionOptionSession' + item.code" :label="item.name"
                                                    :value="item.code">
                                                </el-option>
                                            </el-select>



                                            <el-select
                                                v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '1' && filtersConfig.filterItem.dimScale && filtersConfig.filterItem.dimScale >= limitSize"
                                                v-model="item.values" multiple
                                                :multiple-limit="item.conditionOperator == 'IN' || item.conditionOperator == 'NOTIN' ? 0 : 1"
                                                @change="saveSelect2($event, item, filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel)"
                                                filterable collapse-tags remote reserve-keyword :placeholder="$t('i18n165')"
                                                :remote-method="(val) => remoteMethod(val, filtersConfig.filterItem.dimId, filtersConfig.filterItem.dimLevel, filtersConfig.filterItem.colId)"
                                                style="width:170px;margin-left: 10px;vertical-align:middle" class="noChange"
                                                :loading="conditionLoading">
                                                <el-option
                                                    v-for="option in unionList2(item, dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel])"
                                                    :key="option.code" :label="option.name" :value="option.code">
                                                </el-option>
                                            </el-select>
                                        </template>
                                        <template v-else>
                                            <dropTree style="width: 190px;vertical-align:middle" ref="selectTreeRef"
                                                :key="'selectTreeRef_' + filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel"
                                                :treeData="dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel]"
                                                :params="getNextDimParams(filtersConfig.filterItem.colId)"
                                                :filterItem="filtersConfig.filterItem"
                                                :dimsList="chartDatas.currentModel.options.setData.dataConfig.dimensionLevelItems"
                                                :showCheckbox="false" :dimType="'dataSet'" :treeProps="defaultTreeProps"
                                                :isMultiple="item.conditionOperator == 'IN' || item.conditionOperator == 'NOTIN' ? true : false"
                                                :value="item.values" :label="item.labels" :useLevel="item.blockLevel"
                                                @updataTopData="updataTopData"
                                                @changeVal="changeFormVal($event, item, filtersConfig)"></dropTree>
                                        </template>

                                        <!--日期类型 start-->

                                        <el-date-picker class="tint noChange" v-model="item.values"
                                            v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '10'
                                                && item.conditionOperator != 'NOTIN' && item.conditionOperator != 'IN' && item.conditionOperator != 'BETWEEN'" type="year"
                                            :placeholder="$t('i18n158')" style="width: 170px;vertical-align:middle"
                                            value-format="yyyy">
                                        </el-date-picker>
                                        <el-date-picker class="tint noChange" v-model="item.values"
                                            v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '11'
                                                && item.conditionOperator != 'NOTIN' && item.conditionOperator != 'IN' && item.conditionOperator != 'BETWEEN'" type="month"
                                            size="mini" :placeholder="$t('i18n159')"
                                            style="width: 170px;vertical-align:middle" value-format="yyyyMM">
                                        </el-date-picker>
                                        <el-date-picker class="tint noChange" v-model="item.values"
                                            v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '12'
                                                && item.conditionOperator != 'NOTIN' && item.conditionOperator != 'IN' && item.conditionOperator != 'BETWEEN'" type="date"
                                            size="mini" :placeholder="$t('i18n160')"
                                            style="width: 170px;vertical-align:middle}" value-format="yyyyMMdd">
                                        </el-date-picker>

                                        <div class="tint noChange" style="display: inline-block;" v-if="item.conditionValueType == '-1' && item.conditionOperator == 'BETWEEN'
                                            && bdatePicker(valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '')">
                                            <el-date-picker class="tint noChange" v-model="item.betweenValues"
                                                :type="bdatePicker(valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '').type"
                                                size="mini" :placeholder="$t('i18n166')"
                                                style="width: 290px;vertical-align: middle;"
                                                :range-separator="$t('i18n167')"
                                                :value-format="bdatePicker(valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '').formate">
                                            </el-date-picker>
                                        </div>
                                        <select-date class="tint noChange"
                                            v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '10' && (item.conditionOperator == 'NOTIN' || item.conditionOperator == 'IN')"
                                            @dateChange="searchChangeDate"
                                            :styleObj="{ width: '192px;', 'vertical-align': 'middle' }"
                                            :paramOpt="{ itemIndex: index }" :dateModel="item.values" datetype="year"
                                            valueType="array"></select-date>
                                        <select-date class="tint noChange"
                                            v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '11' && (item.conditionOperator == 'NOTIN' || item.conditionOperator == 'IN')"
                                            @dateChange="searchChangeDate"
                                            :styleObj="{ width: '192px;', 'vertical-align': 'middle' }"
                                            :paramOpt="{ itemIndex: index }" :dateModel="item.values" datetype="month"
                                            valueType="array"></select-date>
                                        <select-date class="tint noChange"
                                            v-if="item.conditionValueType == '-1' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '12' && (item.conditionOperator == 'NOTIN' || item.conditionOperator == 'IN')"
                                            @dateChange="searchChangeDate"
                                            :styleObj="{ width: '192px;', 'vertical-align': 'middle' }"
                                            :paramOpt="{ itemIndex: index }" :dateModel="item.values" datetype="date"
                                            valueType="array"></select-date>
                                        <!--日期类型 end-->
                                    </template>
                                    <el-button v-if="item.conditionValueType == '1'" type="primary" size="mini"
                                        icon="el-icon-document" style="width: 170px;height: 28px;" class="fileNameSpan"
                                        :title="item.fileValue.fileName || $t('i18n27')"
                                        @click="showFilterFileWindow(item)">{{ item.fileValue.fileName }}
                                    </el-button>
                                    <el-select class="tint noChange" v-if="index < filtersConfig.filterData.length - 1"
                                        v-model="item.groupInnerLogicType" slot="prepend" :placeholder="$t('i18n1128')"
                                        size="mini" style="width:60px;">
                                        <el-option :label="$t('i18n168')" value="and"></el-option>
                                        <el-option :label="$t('i18n169')" value="or"></el-option>
                                    </el-select>
                                    <!-- <el-button-group size="mini"> -->
                                    <el-button type="primary" icon="el-icon-link" size="mini" plain
                                        @click="configParams(item, filtersConfig.filterItem)"
                                        v-if="ifShowParamsConfig"></el-button>
                                    <el-button slot="append" icon="el-icon-delete" size="mini" type="danger" plain
                                        style="margin-right:2px;margin-left:2px"
                                        @click="deleteFilterItem(index)"></el-button>
                                    <!-- </el-button-group> -->
                                </div>
                            </template>
                            <el-button type="primary" size="mini" class="baseBtn" plain
                                style="width:120px;margin-top: 10px;" icon="el-icon-plus" @click="addSearchFilter()">{{
                                    $t('i18n1129') }}
                            </el-button>
                        </el-tab-pane>
                        <el-tab-pane
                            v-if="false && filtersConfig.filterItem.clumType == 'dimension' && valueCtrTypeByDimLevelId[filtersConfig.filterItem.colId] + '' == '1'"
                            :label="$t('i18n1130')" name="2">
                            <div style="margin-top: 20px;">
                                <span>{{ $t('i18n1131') }}</span>
                                <el-switch v-model="filtersConfig.filterItem.isfill"
                                    style="margin-right: 20px;"></el-switch>
                                <el-radio v-model="filtersConfig.filterItem.filterCheckRadio" label="1">{{ $t('i18n1132')
                                }}</el-radio>
                                <el-radio v-model="filtersConfig.filterItem.filterCheckRadio" label="2">{{ $t('i18n1133')
                                }}</el-radio>
                                <el-checkbox style="margin-left:40px;" @change="clearSelectedOptions(filtersConfig)"
                                    v-model="filtersConfig.filterItem.filterCheckOption.isFilterCheckOption" size="mini">{{
                                        $t('i18n1134') }}
                                </el-checkbox>
                                <el-button size="mini" v-if="filtersConfig.filterItem.filterCheckOption.isFilterCheckOption"
                                    @click="ShowFilterAddOptionWindow" type="primary" icon="el-icon-plus">
                                    {{ $t('i18n1135') }}
                                </el-button>

                            </div>
                            <div style="padding: 10px;margin-top: 20px;">
                                <!--单选-->
                                <div id="selectSingle" v-if="filtersConfig.filterItem.filterCheckRadio == '1'">
                                    <div id="singleA"
                                        v-if="!filtersConfig.filterItem.filterCheckOption.isFilterCheckOption">
                                        <el-select class="tint noChange" :key="'A'" clearable size="mini"
                                            style="width:400px;" v-model="filtersConfig.filterItem.filterCheckOption.values"
                                            filterable :placeholder="$t('pleaseSelect')">
                                            <el-option
                                                v-for="dimensionOptionSessionItem in dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel + 'formeiju']"
                                                :key="'dimensionOptionSessionItem1' + dimensionOptionSessionItem.code"
                                                :label="dimensionOptionSessionItem.name"
                                                :value="dimensionOptionSessionItem.code">
                                            </el-option>

                                        </el-select>
                                    </div>
                                    <div id="singleB" v-if="filtersConfig.filterItem.filterCheckOption.isFilterCheckOption">
                                        <el-select :key="'B'" clearable class="tint noChange" size="mini"
                                            style="width:400px" v-model="filtersConfig.filterItem.filterCheckOption.values"
                                            filterable :placeholder="$t('pleaseSelect')">
                                            <!--限定枚举范围-->
                                            <el-option
                                                v-for="filterCheckOptionArrItem in filtersConfig.filterItem.filterCheckOption.filterCheckOptionArr"
                                                :key="'filterCheckOptionArrItem1' + filterCheckOptionArrItem.code"
                                                :label="filterCheckOptionArrItem.name"
                                                :value="filterCheckOptionArrItem.code">
                                            </el-option>
                                        </el-select>
                                    </div>
                                </div>
                                <!--多选-->
                                <div id="selectMultiple" v-if="filtersConfig.filterItem.filterCheckRadio == '2'">
                                    <template v-if="!filtersConfig.filterItem.isFilterCheckOption">
                                        <div id="multipleA"
                                            v-if="!filtersConfig.filterItem.filterCheckOption.isFilterCheckOption">
                                            <el-select :key="'C'" size="mini" class="tint noChange" style="width:90%;"
                                                v-model="filtersConfig.filterItem.filterCheckOption.valueArr" filterable
                                                multiple :placeholder="$t('pleaseSelect')">
                                                <el-option
                                                    v-for="dimensionOptionSessionItem in dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel + 'formeiju']"
                                                    :key="'dimensionOptionSessionItem2' + dimensionOptionSessionItem.code"
                                                    :label="dimensionOptionSessionItem.name"
                                                    :value="dimensionOptionSessionItem.code">
                                                </el-option>
                                            </el-select>
                                        </div>
                                        <!--限定枚举范围-->
                                        <div id="multipleB"
                                            v-if="filtersConfig.filterItem.filterCheckOption.isFilterCheckOption">
                                            <el-select :key="'D'" size="mini" style="width:90%;" class="tint noChange"
                                                clearable v-model="filtersConfig.filterItem.filterCheckOption.valueArr"
                                                filterable multiple :placeholder="$t('pleaseSelect')">
                                                <el-option
                                                    v-for="filterCheckOptionArrItem in filtersConfig.filterItem.filterCheckOption.filterCheckOptionArr"
                                                    :key="'filterCheckOptionArrItem2' + filterCheckOptionArrItem.code"
                                                    :label="filterCheckOptionArrItem.name"
                                                    :value="filterCheckOptionArrItem.code">
                                                </el-option>
                                            </el-select>
                                        </div>

                                    </template>
                                </div>
                            </div>
                        </el-tab-pane>
                    </el-tabs>
                </el-col>
            </el-row>
            <dyParamsConfig :controlItem="config" :dataSet="dataSet" ref="dyParamsConfig"></dyParamsConfig>
        </el-dialog>

        <el-dialog :title="$t('i18n1136')" :visible.sync="filtersConfig.isShowFilterAddOptionWindow"
            :close-on-click-modal=false width="500px" height="450px">

            <template v-if="filtersConfig.filterItem && filtersConfig.filterItem.filterCheckOption">
                <UmerationDrop :width="'100%'" :status="true" @getSelected="getSelectedOptions"
                    :dataList="dimensionOptionSession[filtersConfig.filterItem.dimId + '_' + filtersConfig.filterItem.dimLevel + 'formeiju']"
                    :selectedList="filtersConfig.filterItem.filterCheckOption.filterCheckOptionArr"></UmerationDrop>
                <!--                <el-select-->
                <!--                        v-model="filtersConfig.filterItem.filterCheckOption.filterCheckOptionArr"-->
                <!--                        multiple-->
                <!--                        filterable-->
                <!--                        allow-create-->
                <!--                        default-first-option-->
                <!--                        size="mini"-->
                <!--                        style="width: 100%"-->
                <!--                        placeholder="请选择限定项">-->
                <!--                    <el-option-->
                <!--                            v-for="(dimensionOptionSessionItem,index) in dimensionOptionSession[filtersConfig.filterItem.dimId+'_'+filtersConfig.filterItem.dimLevel]"-->
                <!--                            :key="'dimensionOptionSessionItem3'+index"-->
                <!--                            :label="dimensionOptionSessionItem.name"-->
                <!--                            :value="dimensionOptionSessionItem.name">-->
                <!--                    </el-option>-->
                <!--                </el-select>-->
            </template>
        </el-dialog>

        <el-dialog :title="$t('i18n188')" :visible.sync="isShowFileContext" :close-on-click-modal=false width="700px"
            height="500px">
            <el-table :data="fileContext.contextBody" max-height="500" border stripe style="width: 100%">
                <el-table-column v-for="(item, index) in fileContext.contextHead" :prop="item.prop" :label="item.label"
                    :key="'context_' + index" width="180">
                </el-table-column>
            </el-table>
        </el-dialog>

        <!--文件过滤选项框-->
        <el-dialog :title="$t('i18n172')" v-loading="fileLoadIng" :element-fileLoadIng-text="$t('i18n173')"
            element-fileLoadIng-background="rgba(0, 0, 0, 0.8)" :append-to-body="true" custom-class="filterPop"
            :visible.sync="filtersConfig.isShowFilterFileWindow" :close-on-click-modal=false width="800px">
            <el-row style="height:40px;background: #f5eeee;line-height:40px;padding:0 10px;border-radius: 4px;">
                <span>{{ $t('i18n174') }}</span>
                <el-input class="fileSearchInput tint" :placeholder="$t('i18n3')" size="mini"
                    v-model="filtersConfig.filterFilesCheck" style="width: 200px;">
                </el-input>
                <el-upload class="upload-demo" style="margin-left: 280px;margin-top:-40px"
                    action="/ssa/biFile/uploadFileWithRel.action" :auto-upload="true" :before-upload="checkType"
                    :on-success="successUpload" :data="uploadParam" :show-file-list="false">
                    <el-button size="small" type="primary">{{ $t('i18n175') }}</el-button>
                    <div slot="tip" class="el-upload__tip" style="margin-left: 90px;margin-top: -40px">
                        {{ $t('i18n176') }}M{{ $t('i18n177') }}excel{{ $t('i18n178') }}csv{{ $t('i18n179') }}
                    </div>
                </el-upload>
            </el-row>
            <div
                style="height:calc(100% - 45px);border:1px solid #eaeaea;box-sizing:border-box;margin-top: 5px;padding: 5px;overflow-x: hidden;overflow-y: auto;">
                <div :class="getIcon('back', item.file_rel_name, item.file_id)"
                    v-for="(item, index) in filtersConfig.filterFiles" :key="'filterFile' + index">
                    <template
                        v-if="item.file_rel_name.indexOf(filtersConfig.filterFilesCheck) > -1 || item.file_id == filtersConfig.filterConItem.fileValue.fileId">
                        <div class="fileIcon">
                            <i :class="getIcon('class', item.file_rel_name, item.file_id)"></i>
                        </div>
                        <p>{{ item.file_rel_name }}</p>
                        <div class="checkBox">
                            <i class="el-icon-check"></i>
                        </div>
                        <div class="controlBox">
                            <div class="controlIcon" @click="saveFilterFileMasg(item)" :title="$t('i18n180')">
                                <i class="el-icon-check"></i>
                            </div>
                            <div class="controlTools abs">
                                <i class="el-icon-view" @click="preViewFileData(item)" :title="$t('view')"></i>
                                <i class="el-icon-delete" @click="deleteFileRealtion(item)" :title="$t('delete')"></i>
                            </div>
                        </div>
                    </template>
                </div>


                <!-- <div :class="item.file_id == filtersConfig.filterConItem.fileValue.fileId?'activeFileClass':''" v-if="item.file_rel_name.indexOf(filtersConfig.filterFilesCheck) > -1 ||
                    item.file_id == filtersConfig.filterConItem.fileValue.fileId"
                     v-for="(item,index) in filtersConfig.filterFiles" :key="'filterFile'+index"
                     style="width: 150px;height: 80px;background: #b7b2b4;display: inline-block;margin: 10px;border-radius: 4px;"
                     v-on:click="saveFilterFileMasg(item)">
                    <el-button size="mini" type="danger" icon="el-icon-delete-solid" style="position: absolute;" @click="deleteFileRealtion(item)"></el-button>
                    <div style="width: 100%;text-align: center;margin-top: 20px;"> {{item.file_rel_name}}</div>
                    <div style="width: 100%;text-align: center;margin-top: 10px;"> {{item.file_rel_create_time}}</div>
                </div> -->
            </div>

        </el-dialog>
        <sqlDataEditPanle :sqlEditOption="sqlEditOption" :controlDataConfig="controlDataConfig"
            :openControlSqlEditFlag="openControlSqlEditFlag" :datasetOptions="datasetOptions"></sqlDataEditPanle>

        <setTemporaryField @getNewFieldData="getNewFieldData" v-if="editComputeObj" :editComputeObj="editComputeObj">
        </setTemporaryField>

        <!-- 数据项配置弹窗 -->
        <el-dialog :title="$t('i18n1085')" :visible.sync="dynamicParameterConfigDialog" :modal="false" width="550px"
            :before-close="handleCloseDynamicParameterDialog">
            <el-form style="margin-top:20px;" ref="editDynamicParameterObj" :model="editDynamicParameterObj">
                <!-- <el-form-item label="参数关联控件">
                    <el-input class="noChange tint" size="mini" style="width:194px" :value="editDynamicParameterObj.paramAlias"></el-input>
                </el-form-item> -->
                <el-form-item :label="$t('i18n1137')">
                    <el-select v-if="dynamicParameterConfigDialog" size="mini" class="noChange tint"
                        v-model="editDynamicParameterObj.relationParamKey" :placeholder="$t('pleaseSelect')">
                        <el-option v-for="(item, index) in getDynamicParams" :key="'dy_key_' + index" :label="item.label"
                            :value="item.value"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item :label="$t('i18n1138')">
                    <el-select size="mini" class="noChange tint" @change="handleChangeDyType"
                        v-model="editDynamicParameterObj.paramType" style="width:140px" :placeholder="$t('pleaseSelect')">
                        <el-option :label="$t('i18n1139')" value="val"></el-option>
                        <el-option :label="$t('i18n1140')" value="date"></el-option>
                        <el-option :label="$t('i18n1006')" value="level"></el-option>
                    </el-select>
                    <!-- 如果选的是账期，要选年月日 -->
                    <el-select size="mini" class="noChange tint" @change="handleChangeDyLevel"
                        v-if="editDynamicParameterObj.paramType == 'date'" v-model="editDynamicParameterObj.paramRelation"
                        style="width:140px" :placeholder="$t('pleaseSelect')">
                        <el-option :label="$t('i18n1141')" value="year"></el-option>
                        <el-option :label="$t('i18n1142')" value="month"></el-option>
                        <el-option :label="$t('i18n1143')" value="date"></el-option>
                    </el-select>
                    <!-- 如果选的是系统维度，要选哪一个维度 -->
                    <el-select size="mini" @change="getSysDimensionOption(editDynamicParameterObj.paramSysDimId)"
                        class="noChange tint" v-if="editDynamicParameterObj.paramType == 'level'"
                        v-model="editDynamicParameterObj.paramSysDimId" style="width:140px"
                        :placeholder="$t('pleaseSelect')">
                        <el-option v-for="(item, index) in systemDims" :key="'sysDim_' + index" :label="item.dim_name"
                            :value="item.dim_id"></el-option>
                    </el-select>
                    <!-- 如果选了直接输入，则要选择输入框的类型 -->
                    <el-select size="mini" class="noChange tint" @change="handleChangeDyLevelInput"
                        v-if="editDynamicParameterObj.paramType == 'val'" v-model="editDynamicParameterObj.paramInputType"
                        style="width:140px" :placeholder="$t('pleaseSelect')">
                        <el-option :label="$t('textInput')" value="text"></el-option>
                        <el-option :label="$t('numberInput')" value="number"></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item :label="$t('i18n1144')">
                    <template v-if="editDynamicParameterObj.paramType == 'val'">
                     <el-input v-if="editDynamicParameterObj.paramInputType == 'text'" size="mini" class="noChange tint"
                        style="width:194px" v-model="editDynamicParameterObj.paramValueSingle"></el-input>
                     <el-input-number v-if="editDynamicParameterObj.paramInputType == 'number'" size="mini" class="noChange tint"
                        style="width:194px;" v-model="editDynamicParameterObj.paramValueSingle" :controls="false"></el-input-number>
                    </template>
                    <el-date-picker class="tint noChange" v-model="editDynamicParameterObj.paramValueSingle"
                        v-if="editDynamicParameterObj.paramType == 'date' && editDynamicParameterObj.paramRelation == 'year'"
                        type="year" :placeholder="$t('i18n158')" style="width: 170px;vertical-align:middle"
                        value-format="yyyy">
                    </el-date-picker>
                    <el-date-picker class="tint noChange" v-model="editDynamicParameterObj.paramValueSingle"
                        v-if="editDynamicParameterObj.paramType == 'date' && editDynamicParameterObj.paramRelation == 'month'"
                        type="month" size="mini" :placeholder="$t('i18n159')" style="width: 170px;vertical-align:middle"
                        value-format="yyyyMM">
                    </el-date-picker>
                    <el-date-picker class="tint noChange" v-model="editDynamicParameterObj.paramValueSingle"
                        v-if="editDynamicParameterObj.paramType == 'date' && editDynamicParameterObj.paramRelation == 'date'"
                        type="date" size="mini" :placeholder="$t('i18n160')" style="width: 170px;vertical-align:middle}"
                        value-format="yyyyMMdd">
                    </el-date-picker>
                    <dropTree
                        v-if="editDynamicParameterObj.paramType == 'level' && editDynamicParameterObj.paramDimItem && sysDimensionOptionSession[editDynamicParameterObj.paramDimItem.dimId + '_' + editDynamicParameterObj.paramDimItem.dimLevel]"
                        style="width: 190px;vertical-align:middle" ref="selectTreeRef"
                        :key="'selectTreeRef_' + editDynamicParameterObj.paramDimItem.dimId + '_' + editDynamicParameterObj.paramDimItem.dimLevel"
                        :treeData="sysDimensionOptionSession[editDynamicParameterObj.paramDimItem.dimId + '_' + editDynamicParameterObj.paramDimItem.dimLevel]"
                        :params="getNextDimParams(editDynamicParameterObj.paramDimItem.dimLevelId)"
                        :filterItem="editDynamicParameterObj.paramDimItem"
                        :dimsList="systemDimsLevels[editDynamicParameterObj.paramDimItem.dimId]" :showCheckbox="false"
                        :treeProps="defaultTreeProps" :dimType="'system'" :isMultiple="false"
                        :value="[editDynamicParameterObj.paramValueSingle]"
                        :label="[editDynamicParameterObj.paramLabelSingle]"
                        :useLevel="editDynamicParameterObj.paramDimItem.blockLevel" @updataTopData="updataTopData"
                        @changeVal="changeFormVal2($event, editDynamicParameterObj.paramDimItem, filtersConfig)"></dropTree>
                </el-form-item>
                <el-form-item v-if="editDynamicParameterObj.paramType == 'date'" :label="$t('i18n1864')">
                    <el-input class="tint noChange" size="mini" v-model="editDynamicParameterObj.paramDefaultRule"
                        v-if="editDynamicParameterObj.paramRelation == 'year'"
                         style="width: 170px;vertical-align:middle"
                    ><template slot="prepend">yyyy</template> </el-input>
                    <el-input class="tint noChange" size="mini" v-model="editDynamicParameterObj.paramDefaultRule"
                        v-if="editDynamicParameterObj.paramRelation == 'month'"
                         style="width: 170px;vertical-align:middle"
                    ><template slot="prepend">yyyyMM</template>  </el-input>
                    <el-input class="tint noChange" size="mini" v-model="editDynamicParameterObj.paramDefaultRule"
                        v-if="editDynamicParameterObj.paramRelation == 'date'"
                         style="width: 170px;vertical-align:middle"
                    ><template slot="prepend">yyyyMMdd</template>  </el-input>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button size="mini" @click="handleCloseDynamicParameterDialog">{{ $t('cancel') }}</el-button>
                <el-button size="mini" type="primary" @click="handleSaveDynamicParameterDialog">{{ $t('confirm')
                }}</el-button>
            </span>
        </el-dialog>
        <el-dialog :title="$t('i18n1113') + dyIemVal.relationParamKey + '】'" :visible.sync="isShowEditDy" width="460px">
            <div style="width: 420px;">
                <el-form ref="form" :model="dyIemVal" label-width="80px" size="mini" >
                    <el-form-item :label="$t('i18n1114')">
                        <el-input v-model="dyIemVal.relationParamKey" :disabled="true"  class="noChange"></el-input>
                    </el-form-item>
                    <el-form-item :label="$t('i18n1115')">
                        <el-input v-model="dyIemVal.relationParamName"  class="noChange"></el-input>
                    </el-form-item>
                    <el-form-item :label="$t('si18ntipSwitch')">
                        <el-switch
                            v-model="dyIemVal.showRemark"
                            active-color="#13ce66"
                            inactive-color="#ff4949">
                        </el-switch>
                    </el-form-item>
                    <el-form-item :label="$t('si18NtipContent')" v-show="dyIemVal.showRemark">
                        <el-input v-model="dyIemVal.noteNameRemark" type="textarea" maxlength="500" ></el-input>
                    </el-form-item>
                </el-form>
                <!-- <el-input v-model="dyIemVal.relationParamKey" id="oldColNameCn" maxlength="25" :disabled="true" size="mini">
                    <template slot="prepend"><span style="width:50px;display:inline-block">{{ $t('i18n1114')
                    }}</span></template>
                </el-input>
                <el-input v-model.trim="dyIemVal.relationParamName" id="newNoteName" style="margin-top: 5px;" maxlength="25"
                    size="mini">
                    <template slot="prepend"><span style="width:50px;display:inline-block">{{ $t('i18n1115')
                    }}</span></template>
                </el-input> -->

            </div>
            <span slot="footer" class="dialog-footer"></span>
        </el-dialog>
    </div>
</template>

<script>
import { mapActions, mapGetters } from 'vuex'
import selectTree from './styleSubModules/selectTree'
import selectDate from './../../../../publicModule/selectDate'//多选时间模板
import UmerationDrop from './../../../../publicModule/umerationDrop'
import setTemporaryField from './../setTemporaryField'
import sqlDataEditPanle from './styleSubModules/sqlDataEditPanle'
import dropTree from './../../../../publicModule/dropTree'
import dyParamsConfig from './dyparam.vue'
export default {
    name: "dataSet",
    props: ['config', 'dataSet', 'type', 'sqlEditOption', 'setRepStyle'],
    components: { selectTree, selectDate, UmerationDrop, setTemporaryField, sqlDataEditPanle, dropTree, dyParamsConfig },
    data: function () {
        let _this = this;
        return {
            checkDimAll: false,
            isIndeterDim: false,
            systemDims: [],
            systemDimsLevels: {},
            checkedDims: [],
            checkGdlAll: false,
            isIndeterGdl: false,
            checkedGdls: [],
            conditionLoading: false,
            limitSize: 50,//下拉选数据量大于50条改用远程搜索
            // sqlOutClumsSession: {},//sql配置输出字段缓存
            // sqlEditOption: null,//sql编辑所需信息
            openControlSqlEditFlag: false,
            controlDataConfig: {},//控件数据配置
            tableType: "",
            columIemVal: {},
            dyIemVal: {},
            isCanEditAccuracy: true,
            isShowEditDimension: false,
            isShowEditDy: false,
            indiGroud: ['SUN', 'AVG', 'CNT', 'MAX', 'MIN', 'RCNT'],
            filterClumsIndex: 0,
            filterClumsIndex2: 1,
            isShowFileContext: false,
            fileContext: {
                contextHead: [],
                contextBody: []
            },
            // nowDatasetId:'',
            nowChartId: -1,
            uploadParam: {
                businessType: "",
                objId: ""
            },
            fileLoadIng: false,
            index: null,
            filter_activeName: "filter_first",
            searchActiveNames: "1",//默认打开第一个面板
            dragItem: null,
            dataSetItemFilterKey: "",//数据集字段名称过滤显示
            filtersConfig: {
                show: false,
                searchShow: false,
                showControlClumFilter: false,//打开控件字段过滤条件配置页面
                isShowFilterFileWindow: false,//打开过滤条件文件选项框
                isShowFilterAddOptionWindow: false,//打开枚举条件限定框
                activeIndex: -1,
                filterData: [],//字段过滤条件配置时，点击，将值赋值，用于动态显示
                filterItem: {},//当前点击的过滤条件字段，用于确定相关类型，过滤类型
                filterConItem: {},//当前过滤字段，子配置项
                showFilterCharts: [],//当前可选的
                filterFiles: [],//当前用户的文件过滤条件
                filterFilesCheck: "",//过滤条件
                searchFilterOptionsMap: {},//字段过滤条件逻辑关系缓存 < > = in ....
                addFilterOptionValue: "",//添加过滤条件选项
            },
            showOverLayer: false,
            handleOuterHeight: [],
            handleStartPosiY: 0,
            datasetOptions: [],
            operatorbylabel: {},//过滤条件，聚合条件 下拉选
            searchFilterOptions: [],//过滤条件动态下拉选
            valueCtrTypeByDimLevelId: {},//过滤条件类型对照表
            getDataForDimension: [],
            getDataForIndicator: [],
            getDataForOuter: [],//输出
            groupList: [
                /* {name: '求和', code: 'SUM'},
                 {name: '计数', code: 'CNT'},
                 {name: '最大值', code: 'MAX'},
                 {name: '最小值', code: 'MIN'},
                 {name: '平均值', code: 'AVG'},
                 {name: '去重', code: 'CNTD'}*/
                { function_id: "1", function_name: this.$t('i18n321') }
            ],
            filterLogicList: [
                { name: this.$t('i18n168'), code: 'and' },
                { name: this.$t('i18n169'), code: 'or' },
            ],
            filterhavingorwhere: [
                { name: this.$t('i18n184'), code: '-1' },
                { name: this.$t('i18n1145'), code: '1' },
            ],
            dimensionOptionSession: {},//页面缓存当前配置维度可用枚举值，避免多次查询
            addNewTemporaryFieldEnusedFuns: [],//当前数据集可用函数
            editComputeObj: null,
            defaultTreeProps: {
                label: 'name',
                value: 'code',
                children: 'children',
                isLeaf: 'isLeaf'
            },
            typeDynamicParameterDialog: '',
            dynamicParameterConfigDialog: false,
            editDynamicParameterObj: {
                relationParamKey: '',
                relationParamName: '',
                paramType: '',
                paramRelation: '',
                paramSysDimId: '',
                paramValueSingle: '',
                paramLabelSingle: '',
                paramDimItem: undefined,
                paramInputType:'',
            },
            filterDynamicParameterObj: {
                relationParamKey: '',
                relationParamTarget: ''
            },
            sysDimensionOptionSession: {}
        }
    },
    watch: {
        // nowDatasetId:function (newValue,oldValue) {
        //     if(newValue!=oldValue && newValue!=''){
        //         this.dataSet.dataConfig.dataSetId = newValue;
        //         this.clearDataSetOption();
        //     }
        // },
        'chartDatas.currentModel.i': {
            handler(newValue, oldValue) {
                console.log("i:" + newValue);
                if (oldValue == '' || newValue == oldValue) return;
                this.setDataSetClumsMsg();
                this.dataSetItemFilterKey = "";
            }
        },
        'dataSet.dataConfig.dataSetId': {
            handler(newValue, oldValue) {
                console.log("dataSetId:" + newValue);
                this.getSelectedDataSetInfo(newValue);
                this.dataSetItemFilterKey = "";
            }
        },
        'dataSet.dataConfig.sql': {
            handler(newValue, oldValue) {
                console.log("sql:" + newValue);
                this.getSelectedSqlInfo(newValue);
            }
        },
        'chartDatas.addChartEventForDataSet': function () {
            console.log("addChartEventForDataSet:");
            this.setDataSetClumsMsg();
            this.dataSetItemFilterKey = "";
        }

    },
    mounted: function () {
        this.$dragging.$on('dragged', ({ value }) => {
        });
        this.$dragging.$on('dragend', (e) => {
        });
        // this.nowDatasetId = this.dataSet.dataConfig.dataSetId;
        this.getSystemDims()
        if (!this.dataSet.dataConfig.searchType) {
            this.$set(this.dataSet.dataConfig, "searchType", "0");
            console.log("this.dataSet.dataConfig====", this.dataSet.dataConfig);
        };
    },
    created: function () {
        this.getDataSetList();
        this.getSelectedSqlInfo();
    },
    methods: {
        ...mapActions(["modifySqlOutClumsSession"]),
        //重命名同步到表头信息中
        reName(item) {
            let flag = false;
            if (this.config.options.setStyle.table) {
                reNameTableData(this.config.options.setStyle.table.theadData);
            }
            function reNameTableData(arry) {
                if (flag) return;
                for (let i of arry) {
                    if (i.children[0]) reNameTableData(i.children);
                    else {
                        if (i.prop && i.prop == item.colAlias) {
                            i.label = item.noteName || item.colNameCn;
                            flag = true;
                            break;
                        }
                    }
                }
            }
            this.isCanEditAccuracy = true;
        },
        unionList: function (config, list2) {
            var list1 = config.condition[0].selectedItem;
            if (list2 == undefined) {
                list2 = []
            }
            return this.addSet(list1, list2);
        },
        unionList2: function (item, list2) {
            var list1 = item.selectedItem;
            if (list2 == undefined) {
                list2 = []
            }
            return this.addSet(list1, list2);
        },
        addSet: function (list1, list2) {
            let returnArr = [];
            let newArr = list1.concat(list2);
            for (let a = 0; a < newArr.length; a++) {
                let flag = true;
                let acode = newArr[a].code;
                for (let b = 0; b < returnArr.length; b++) {
                    let bcode = returnArr[b].code;
                    if (acode == bcode) {
                        flag = false;
                    }
                }
                if (flag) {
                    returnArr.push(newArr[a])
                }
            }
            return returnArr;
        },
        ...mapActions(['modifyChartDatas']),
        changeDatasetId: function (param) {
            if (param.id != this.dataSet.dataConfig.dataSetId) {
                this.clearDataSetOption();
                this.tableType = param.tabletype;
            }
        },

        changeValuesType: function (p1, p2) {
            console.log('p1======', p1);
            console.log('p2======', p2);
            if (p1 == 'IN' || p1 == 'NOTIN') {
                this.$set(p2, 'values', []);
                if (p2.labels) {
                    this.$set(p2, 'labels', []);
                }
            } else {
                this.$set(p2, 'values', '');
                if (p2.labels) {
                    this.$set(p2, 'labels', '');
                }
            }
            if (p1 == 'BETWEEN') {
                this.$set(p2, "betweenValues", []);
            }
            this.$forceUpdate();
        },


        //控件改变，数据集id变化，手动写入输入框数据集名称

        /*   setDataSetNameWhenChange:function(newValue,oldValue){
               let _this = this;
               if(newValue && newValue != oldValue){
                   this.$nextTick(function () {
                       //页面渲染后，将当前的数据集名称写入输入框中
                       if(_this.datasetOptions){
                           let nodeName =  _this.getTreeDeepArr(newValue,_this.datasetOptions).nodeName;
                           document.getElementById("elStreeINput").value = nodeName;
                       }
                   });
               }else if(!newValue){
                   this.$nextTick(function () {
                       //页面渲染后，将当前的数据集名称写入输入框中
                       document.getElementById("elStreeINput").value = "";
                   });
               }
           },*/

        openSqlDataEdit: function () {
            // this.controlInstData =
            this.openControlSqlEditFlag = true;
            this.controlDataConfig = this.dataSet;
        },

        openDatasetEdit: function () {
            if (this.dataSet.dataConfig.searchType == '1') {
                this.openControlSqlEditFlag = true;
                this.controlDataConfig = this.dataSet;
            } else {
                let datasetId = this.dataSet.dataConfig.dataSetId;
                this.$common.updateDataViewCount(datasetId);
                if (datasetId == "" || datasetId == undefined) {
                    this.$message({
                        message: this.$t('i18n1146'),
                        type: 'warning'
                    });
                    return;
                } else {
                    if (this.tableType != "3") {
                        window.open('./report.html?ticket=' + this.chartDatas.ticket + '&tableId=' + datasetId, '_blank');
                    } else {
                        window.open('./relation.html?ticket=' + this.chartDatas.ticket + '&tableId=' + datasetId, '_blank');
                    }
                }
            }


        },
        openDatasetEdit2: function () {
            let _this = this;
            let param = new URLSearchParams()
            param.append('ticket', _this.ssa_ticket);
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/savePermissions/checkCanCreatDataBase.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        if (response.data.data == true) {
                            window.open('./relation.html?ticket=' + _this.chartDatas.ticket);
                        } else {
                            _this.$message({
                                message: this.$t('i18n38'),
                                type: 'warning'
                            });
                        }
                    } else {
                        _this.$message.error(response.data.msg || 'error');
                    }
                },
                errorCallBack: function (error) {
                    _this.loading = false;
                }
            });
        },
        dataVlaueChange: function (data_value, item) {
            console.log(data_value);
            console.log(item);
        },
        //添加条件限定filtersConfig.showFilterCharts
        ShowFilterAddOptionWindow: function () {
            this.filtersConfig.isShowFilterAddOptionWindow = true;
        },
        //切换限定选项时清空已选内容
        clearSelectedOptions: function (obj) {
            this.$set(obj.filterItem.filterCheckOption, 'values', '');
            this.$set(obj.filterItem.filterCheckOption, 'valueArr', []);
        },
        //从子组件获取已选中的选项
        getSelectedOptions: function (arr) {
            this.$set(this.filtersConfig.filterItem.filterCheckOption, 'filterCheckOptionArr', arr);
        },
        deleteDimension: function (item, index) {
            //当删除的是有树形或者下钻的维度时先取消树形或者维度
            if (item.isEnableDrill) this.toggleEnableDrill(item, index);
            if (item.isTreeData) this.toggleTreeData(item, index);
            let enableDrillId = this.dataSet.dataConfig.dimension[index].isEnableDrill;
            this.dataSet.dataConfig.dimension.splice(index, 1);
            if (this.dataSet.dataConfig.drillCloneDim) {
                this.dataSet.dataConfig.drillCloneDim.splice(index, 1);
            }
            if (this.dataSet.dataConfig.drillList && this.dataSet.dataConfig.drillList.length > 0) {
                for (let i = 0; i < this.dataSet.dataConfig.drillList.length; i++) {
                    if (this.dataSet.dataConfig.drillList[i].id == enableDrillId) {
                        this.$delete(this.dataSet.dataConfig.drillList, i);
                        break;
                    }
                }
            }
        },
        deleteFileRealtion: function (item) {
            let _this = this;
            _this.$confirm(`${_this.$t('i18n191')}?`, _this.$t('tips'), {
                confirmButtonText: _this.$t('confirm'),
                cancelButtonText: _this.$t('cancel'),
                type: 'warning'
            }).then(() => {
                _this.fileLoadIng = true;
                let param = new URLSearchParams();
                param.append('fileId', item.file_id);
                param.append('businessType', "6");
                param.append('objId', _this.chartDatas.userId);
                _this.$common.requireBackData({
                    type: 'post',
                    url: '/ssa/biFile/deleteFile.action',
                    param: param,
                    successCallBack: function (response) {
                        if (response.data.status == 1) {
                            if (_this.filtersConfig.filterConItem.fileValue.fileId == item.file_id) {
                                _this.filtersConfig.filterConItem.fileValue.fileId = "";
                                _this.filtersConfig.filterConItem.fileValue.fileName = "";
                            }
                            _this.$message({
                                message: _this.$t('deleteSuccess'),
                                type: 'success'
                            });
                            _this.getFilterFiles();
                            _this.fileLoadIng = false;
                        } else {
                            _this.$message({
                                message: response.data.msg,
                                type: 'warning'
                            });
                            _this.fileLoadIng = false;
                        }
                    }
                })
            });
        },
        checkType: function (file) {
            this.uploadParam.businessType = "6";
            this.uploadParam.objId = this.chartDatas.userId;
            this.uploadParam.tableId = this.dataSet.dataConfig.dataSetId;
            let type = file.name.split(".");
            let type2 = type[type.length - 1].toLocaleUpperCase();
            if (type2 != "XLS" && type2 != "XLSX" && type2 != "CSV") {
                this.$message({
                    message: `${this.$t('pleaseSelect')}EXCEL${this.$t('i18n164')}${this.$t('i18n169')}CSV${this.$t('i18n196')}`,
                    type: 'warning'
                });
                return false;
            }
        },
        successUpload: function (response, file, fileList) {
            this.getFilterFiles(response);
        },
        deleteIndicator: function (place, index) {
            this.dataSet.dataConfig[place].splice(index, 1)
        },
        deleteFilter: function (index) {
            this.dataSet.dataConfig.filter[0].config.splice(index, 1)
        },
        handleDragStart: function (e) {
            this.handleStartPosiY = e.pageY;
            this.handleOuterHeight = [this.$refs.outDimension.offsetHeight, this.$refs.outIndicator.offsetHeight]
        },
        allowDrop: function (e) {
            e.preventDefault();
            e.stopPropagation()
        },
        dropendDo: function (str, e) {
            console.log(`${this.$t('i18n1147')}==============================`, e)
            console.log(`${this.$t('i18n1148')}==============================`, this.dragItem)
            this.showOverLayer = false;
            e.stopPropagation();
            if (this.dragItem.clumType != "sqlClum" && str != 'filter' && str != this.dragItem.clumType) {
                this.$message.warning(this.$t('i18n1149'));
                return false;
            }
            //过滤条件
            if (str == "filter" && this.dataSet.dataConfig[str].length == 0) {
                this.dataSet.dataConfig[str] = [
                    {
                        "groupGroupLogicType": "and",//组间逻辑关系：or/and 默认 and
                        "groupName": this.$t('i18n59'),
                        "config": []
                    }
                ];
            }
            let checkArr = str == "filter" ? this.dataSet.dataConfig[str][0].config : this.dataSet.dataConfig[str];
            for (let i = 0; i < checkArr.length; i++) {
                if (checkArr[i].colId == this.dragItem.colId) {
                    if (e.type == 'drop') {
                        this.$message.error(this.$t('i18n1150'));
                    }
                    return;
                }
            }
            let clumMode = this._.cloneDeep(this.dragItem);
            if (str == "filter") {
                clumMode.filterCheckType = "1";//默认筛选条件为条件筛选  2 为枚举筛选
                clumMode.filterCheckRadio = "1";//默认枚举筛选为 单选 2 为多选
                clumMode.filterCheckOption = {
                    isFilterCheckOption: false,//枚举限定范围
                    filterCheckOptionArr: [],//枚举限定范围
                    selfFilterOptions: [],//自定义添加过滤条件
                    values: "",//单个值
                    valueArr: []//数组值
                };

                this.dataSet.dataConfig[str][0].config.push(clumMode);
            } else {
                console.log(`${this.$t('i18n1151')}============`, this.chartDatas.currentModel)
                if (this.chartDatas.currentModel.templateId == '1' || this.chartDatas.currentModel.templateId == '7') {  //柱状图多维度的时候只能一个指标，一个维度的时候可以存在多个指标
                    let dimensionLength = this.dataSet.dataConfig['dimension'].length
                    let indicatorLenght = this.dataSet.dataConfig['indicator'].length
                    if ("dimension" == str) {
                        dimensionLength++
                        clumMode.colAlias = clumMode.dimId + "_" + clumMode.dimLevel;
                        if (this.dataSet.dataConfig.drillCloneDim) {
                            this.dataSet.dataConfig.drillCloneDim.push(clumMode);
                        }
                    } else if ("indicator" == str) {
                        indicatorLenght++
                        clumMode.colAlias = "indicator_" + clumMode.colId;
                    }
                    if (dimensionLength > 1 && indicatorLenght > 1) {
                        this.$message.warning(this.$t('i18n1152'));
                        return false;
                    }
                    if (dimensionLength > 2) {
                        this.$message.warning(this.$t('i18n1153'));
                        return false;
                    }
                } else {
                    if ("dimension" == str) {
                        if (this.chartDatas.currentModel.global.dims && this.chartDatas.currentModel.global.dims <= this.dataSet.dataConfig[str].length) {
                            this.$message.warning(this.$t('i18n1154') + this.chartDatas.currentModel.global.dims + this.$t('i18n1155'));
                            return false;
                        }
                        clumMode.colAlias = clumMode.dimId + "_" + clumMode.dimLevel;
                        if(this.chartDatas.currentModel.type=='summaryTable'){
                            clumMode.isSubAggDim=true;
                        }
                        if (this.dataSet.dataConfig.drillCloneDim) {
                            this.dataSet.dataConfig.drillCloneDim.push(clumMode);
                        }
                    } else if ("indicator" == str) {
                        if (this.chartDatas.currentModel.global.inds && this.chartDatas.currentModel.global.inds <= this.dataSet.dataConfig[str].length) {
                            this.$message.warning(this.$t('i18n1154') + this.chartDatas.currentModel.global.inds + this.$t('i18n1156'));
                            return false;
                        }
                        clumMode.colAlias = "indicator_" + clumMode.colId;
                        //默认为求和
                        if (!clumMode.group) {
                            clumMode.group = 1;
                            //如果没有function_id则为sum
                            clumMode.shortCode = 'SUM';
                        }
                    }
                }
                this.dataSet.dataConfig[str].push(clumMode);
            }
            //查询条件添加之后，自动检测有存在级联的情况，存在的时候，把相关维度层级条件重置
            if (str == 'filter') {
                //维度情况
                if (this.dragItem.clumType == "dimension" && this.dragItem.systemDimId) {
                    let filterModel = this.dataSet.dataConfig['filter']
                    for (let i = 0; i < filterModel.length; i++) {
                        if (filterModel[i] && filterModel[i].config) {
                            for (let j = 0; j < filterModel[i].config.length; j++) {
                                if (this.dragItem.systemDimId == filterModel[i].config[j].systemDimId) {
                                    if (this.dragItem.systemDimLevelId > filterModel[i].config[j].systemDimLevelId) {
                                        if (!filterModel[i].config[j].condition || !filterModel[i].config[j].condition[0]) {
                                            continue
                                        }
                                        filterModel[i].config[j].condition[0].values = []
                                        filterModel[i].config[j].condition[0].conditionOperator = 'EQ' //默认重置为等于
                                        filterModel[i].config[j].condition[0].filterType = '1' //一般查询
                                        filterModel[i].config[j].condition[0].selectedItem = [] //清空选项缓存
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.dragItem = null;
        },
        dragStart: function (item) {
            this.showOverLayer = true;
            /*if(!item.isCover){
                item.isCover="1";
            }*/
            this.dragItem = item;
        },
        handleDragging(e) {
            if (e.pageY == 0) {
                return;
            }
            let posiPlus = e.pageY - this.handleStartPosiY;
            if (this.handleOuterHeight[0] + posiPlus < 50) {
                return
            }
            this.$refs.outDimension.style.height = this.handleOuterHeight[0] + posiPlus + 'px';
            this.$refs.outIndicator.style.height = this.handleOuterHeight[1] - posiPlus + 'px';
        },
        getDataSetList: function () {
            let param = new URLSearchParams(), _this = this;
            param.append('userId', this.chartDatas.userId);
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/biReport/searchViewReportDataSetItem.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        _this.datasetOptions = response.data.data ? response.data.data : [];
                        _this.chartDatas.datasetOptions = response.data.data ? response.data.data : [];
                        _this.setDataSetClumsMsg();  //展示当前控件的字段信息
                    } else {
                        _this.$message.error(_this.$t('i18n338') + response.data.msg);
                    }
                },
                errorCallBack: function (error) {
                    _this.$message.error(_this.$t('i18n339'));
                }
            })
        },

        /**
         * 展示当前控件数据集的字段信息
         * */
        setDataSetClumsMsg: function () {
            this.$nextTick(function () {

                this.getDataForDimension = []; //清空当前配置项
                this.getDataForIndicator = []; //清空当前配置项
                if (!this.chartDatas.currentModel) {
                    return
                }
                let dataSetIdNow = this.chartDatas.currentModel.options.setData.dataConfig.dataSetId;
                if (dataSetIdNow && dataSetIdNow != '' && this.datasetOptions.length > 0) {
                    // this.dataSet.dataConfig.dataSetIdTree = this.getTreeDeepArr(dataSetIdNow, this.datasetOptions);
                    this.getSelectedDataSetInfo(dataSetIdNow);
                } else {
                    this.getDataForDimension = [];
                    this.getDataForIndicator = [];
                }
            });

        },

        //校验当前条件是否为必选条件，必选条件不允许删除
        checkFilterType: function (configItem) {
            if (this.getDataForDimension && this.getDataForDimension.length > 0) {
                for (let i = 0; i < this.getDataForDimension.length; i++) {
                    if (this.getDataForDimension[i].colId == configItem.colId && this.getDataForDimension[i].dimPartitionFlag == '1') {
                        return false;
                    }
                }
            }
            return true;
        },

        //检查当前字段是否已经添加到过滤条件中
        isReadyAddToFilter: function (colId) {
            let filter = this.chartDatas.currentModel.options.setData.dataConfig.filter;
            for (let i = 0; i < filter.length; i++) {
                let config = filter[i].config;
                if (config && config.length > 0) {
                    for (let j = 0; j < config.length; j++) {
                        if (config[j].colId == colId) {
                            return true;
                        }
                    }
                }
            }
            return false;
        },

        //添加默认查询条件
        doMandatoryFilterCheck: function () {
            //考虑到原有报表配置已有过滤条件，避免产生取数歧义，不添加
            if (this.dataSet.dataConfig.filter.length > 0) {
                return;
            }
            //查询控件不做处理
            if (!this.chartDatas.currentModel || this.chartDatas.currentModel.type == "search" || !this.chartDatas.currentModel.options.setData.dataConfig.filter) {
                return;
            }
            //console.log("开始检查是否有默认查询条件......................................");
            let addDimesionFilter = [];
            for (let i = 0; i < this.getDataForDimension.length; i++) {
                if (this.getDataForDimension[i].dimPartitionFlag == "1" && !this.isReadyAddToFilter(this.getDataForDimension[i].colId)) {
                    addDimesionFilter.push(this.getDataForDimension[i]);
                }
            }
            //console.log("默认查询条件====================",addDimesionFilter);
            if (addDimesionFilter.length > 0) {
                //当前控件是否添加默认过滤项
                if (this.dataSet.dataConfig.filter.length == 0) {
                    this.addFilterData(-1);
                    for (let j = 0; j < addDimesionFilter.length; j++) {
                        this.addMandatoryFilter(0, addDimesionFilter[j].colId);
                    }
                }
            }
        },

        //添加默认过滤条件
        addMandatoryFilter: function (index, colId) {
            this.dataSet.dataConfig.filter[index].config.push({
                "colId": colId,
                "dimPartitionFlag": 1,//必填条件
                "condition": [
                    {
                        "groupInnerLogicType": "and",//组内逻辑关系：or/and
                        "conditionValueType": "-1",//值类型(-1:普通,1:文件)
                        "filterType": "-1",//过滤类型(-1:条件过滤，1：枚举过滤)
                        "filterLevel": "-1",//过滤级别类型：清单级别过滤(-1)/报表级别过滤(1)
                        "conditionOperator": "EQ",//条件操作符，默认等于
                        "fileValue": {
                            "fileId": "",
                            "fileName": ""
                        },
                        "values": '',//单个值
                        "dimPartitionFlag": 1,//必填条件
                        "selectedItem": []
                    }
                ]
            });
            this.configItemClumChange(index, this.dataSet.dataConfig.filter[index].config.length - 1, this.pushDefualValueFun);
        },

        //添加默认条件
        pushDefualValueFun: function (filterItemModel) {
            let defualValue = "";
            if (this.valueCtrTypeByDimLevelId[filterItemModel.colId] + '' == '10') { //年
                defualValue = this.$common.dateFormat("yyyy", this.$common.dateCalculation(new Date(), "year", -1));
            } else if (this.valueCtrTypeByDimLevelId[filterItemModel.colId] + '' == '11') { //月
                defualValue = this.$common.dateFormat("yyyyMM", this.$common.dateCalculation(new Date(), "month", -1));
            } else if (this.valueCtrTypeByDimLevelId[filterItemModel.colId] + '' == '12') { //日
                defualValue = this.$common.dateFormat("yyyyMMdd", this.$common.dateCalculation(new Date(), "date", -1));
            } else if (filterItemModel.condition[0].conditionValueType == '-1' && this.valueCtrTypeByDimLevelId[filterItemModel.colId] + '' == '1') {
                if (this.dimensionOptionSession[filterItemModel.dimId + '_' + filterItemModel.dimLevel] &&
                    this.dimensionOptionSession[filterItemModel.dimId + '_' + filterItemModel.dimLevel].length > 0) {
                    defualValue = [this.dimensionOptionSession[filterItemModel.dimId + '_' + filterItemModel.dimLevel][0].code];
                }
            }
            filterItemModel.condition[0].values = defualValue;
        },


        //重置数据配置
        clearDataSetOption: function () {
            delete this.dataSet.dataConfig.drillCloneDim;
            delete this.dataSet.dataConfig.drillCloneFilter;
            delete this.dataSet.dataConfig.drillList;
            delete this.chartDatas.currentModel.drillCloneQuery;
            delete this.chartDatas.currentModel.drillPrototype;
            this.dataSet.dataConfig.dimension = [];
            this.dataSet.dataConfig.indicator = [];
            this.dataSet.dataConfig.expression = [];
            this.dataSet.dataConfig.order = [];
            this.dataSet.dataConfig.filter = [];
        },

        //sql信息
        getSelectedSqlInfo: function () {
            // if(this.sqlOutClumsSession[this.chartDatas.currentModel.id]){return;}
            if (this.dataSet.dataConfig.searchType != '1') { return; }
            let param = new URLSearchParams();
            param.append('ticket', this.$ticketUtil.getCookie("ssa_ticket"));
            param.append('sql', this.dataSet.dataConfig.sql);
            param.append('datasourceId', this.dataSet.dataConfig.datasourceId);
            let _this = this;
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/biReport/parseOutputAliasInfoBySqlReportBean.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        let sqlClumArr = [];
                        for (let i = 0; i < response.data.data.length; i++) {
                            sqlClumArr.push(
                                {
                                    name: response.data.data[i].alias,
                                    colNameCn: response.data.data[i].alias,
                                    colId: response.data.data[i].alias,
                                    clumType: "sqlClum",
                                    dimId: response.data.data[i].alias,
                                    dimLevel: response.data.data[i].alias,
                                    type: response.data.data[i].type
                                }
                            );
                        }
                        //_this.sqlOutClumsSession[_this.dataSet.dataConfig.dataSqlId] = sqlClumArr;
                        _this.$set(_this.sqlOutClumsSession, _this.chartDatas.currentModel.id, sqlClumArr);
                        _this.addDefualSqlClumsToControl(sqlClumArr);
                    }
                },
                errorCallBack: function (error) {
                    console.log(`${_this.$t('i18n1157')}SQL输入字段有误===`, error);
                }
            });


        },

        addDefualSqlClumsToControl: function (sqlClumArr) {
            if (this.chartDatas.currentModel.type != "table" && sqlClumArr && sqlClumArr.length > 0) {
                return;
            }
            if (this.dataSet.dataConfig.indicator.length == 0 && this.dataSet.dataConfig.dimension.length == 0) {
                for (let i = 0; i < sqlClumArr.length; i++) {
                    let clumMode = this._.cloneDeep(sqlClumArr[i]);
                    clumMode.colAlias = clumMode.dimId + "_" + clumMode.dimLevel;
                    this.dataSet.dataConfig["dimension"].push(clumMode);
                }
            }
        },


        //数据集信息
        getSelectedDataSetInfo: function (dataSetId) {
            if (!dataSetId || dataSetId == "") {
                this.operatorbylabel = [];//过滤，汇总条件 选项
                this.valueCtrTypeByDimLevelId = [];//过滤条件类型对照关系
                this.chartDatas.currentModel.options.setData.dataConfig.operatorbylabel = [];
                this.chartDatas.currentModel.options.setData.dataConfig.valueCtrTypeByDimLevelId = [];
                this.getDataForDimension = [];
                this.getDataForIndicator = [];
                this.$refs.datasetTree.labelModel = '';
                return;
            }
            // this.dataSet.dataConfig.dataSetId = dataSetId;
            let param = new URLSearchParams(), _this = this;
            param.append('userId', this.chartDatas.userId);
            param.append('dataSetId', dataSetId);
            console.log(`--------------------${this.$t('i18n1159')}`)
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/biReport/searchViewReportDataSetInfo.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        //console.log("当前数据集字段信息=======================", response.data);
                        _this.operatorbylabel = response.data.data.operatorByLabel;//过滤，汇总条件 选项
                        //_this.operatorbylabel['date_level_*'].splice(1,1)
                        _this.valueCtrTypeByDimLevelId = response.data.data.valueCtrTypeByDimLevelId;//过滤条件类型对照关系
                        if (_this.chartDatas.currentModel) {
                            _this.chartDatas.currentModel.options.setData.dataConfig.operatorbylabel = response.data.data.operatorByLabel;
                            _this.chartDatas.currentModel.options.setData.dataConfig.valueCtrTypeByDimLevelId = response.data.data.valueCtrTypeByDimLevelId;
                            _this.chartDatas.currentModel.options.setData.dataConfig.funcGroupList = response.data.data.functionItems;
                            _this.chartDatas.currentModel.options.setData.dataConfig.dimFuncGroupList = response.data.data.dimFunctionItems;
                            // _this.chartDatas.currentModel.options.setData.dataConfig.dimensionLevelItems = response.data.data.dimensionLevelItems;
                            // _this.chartDatas.currentModel.options.setData.dataConfig.indicatorItems = response.data.data.indicatorItems;
                            _this.chartDatas.currentModel.options.setData.dataConfig.dataSetInfo = response.data.data.dataSetInfo
                            _this.chartDatas.currentModel.options.setData.dataConfig.varNameMap = response.data.data.varNameMap
                        }
                        _this.addNewTemporaryFieldEnusedFuns = response.data.data.calFunctionItems;
                        _this.buildSearchFilterOptionsMap();//创建字段类型条件对照关系
                        _this.getDataForDimension = [] = (function (arr) {
                            let newArr = [];
                            for (let i = 0; i < arr.length; i++) {
                                let temp = {
                                    colId: arr[i].dimLevelId,
                                    clumType: "dimension",
                                    colNameCn: arr[i].dimLevelName,
                                    colAlias: "",
                                    dimLevel: arr[i].dimLevel,
                                    dimId: arr[i].dimId,
                                    dimLevelId: arr[i].dimLevelId,
                                    orderType: "",
                                    dimPartitionFlag: arr[i].dimPartitionFlag,//必选标识，对应系统分区字段
                                    show: true,
                                    group: "",
                                    dimScale: arr[i].dimScale,
                                    isCover: "1",
                                    reMark: arr[i].reMark,
                                    systemDimId: arr[i].systemDimId,
                                    systemDimLevelId: arr[i].systemDimLevelId
                                }
                                if (arr[i].group) {
                                    let isHaveGroup = _this.$common.isHaveGroupPoint(newArr, arr[i].dimId);
                                    if (!isHaveGroup) {
                                        newArr.push({
                                            clumType: 'group',
                                            groupName: arr[i].dimName,
                                            relId: arr[i].dimId,
                                            status: false
                                        })
                                    }
                                    temp.groupflag = true;
                                    temp.show = false;
                                }
                                newArr.push(temp)
                            }
                            return newArr;
                        })(response.data.data.dimensionLevelItems);
                        _this.chartDatas.currentModel.options.setData.dataConfig.dimensionLevelItems = _this.getDataForDimension
                        _this.getDataForIndicator = [] = (function (arr, functions) {
                            let newArr = [];
                            for (let i = 0; i < arr.length; i++) {
                                let functionObj = functions.find(el => el.functionId == arr[i].functionId)
                                newArr.push({
                                    clumType: "indicator",
                                    colId: arr[i].indicatorId,
                                    colNameCn: arr[i].indicatorName,
                                    des: arr[i].indicatorDes,
                                    colAlias: "",
                                    orderType: "",
                                    group: functionObj ? functionObj.functionId : '1',
                                    isCover: "1",
                                    shortCode: functionObj ? functionObj.shortCode : 'SUM'
                                })
                            }
                            return newArr;
                        })(response.data.data.indicatorItems, response.data.data.functionItems);
                        _this.chartDatas.currentModel.options.setData.dataConfig.indicatorItems = _this.getDataForIndicator
                        console.log(`${_this.$t('i18n1160')}===`, response.data.data.dimensionLevelItems);
                        console.log(`${_this.$t('i18n1161')}.............`, _this.getDataForDimension);
                        //获取完数据集信息之后，执行必选过滤条件添加
                        _this.doMandatoryFilterCheck();
                    } else {
                        _this.$message.error(_this.$t('i18n341') + response.data.msg);
                    }
                },
                errorCallBack: function (error) {
                    _this.$message.error(_this.$t('i18n342'));
                }
            })
            this.getDataSetGroupFunction(dataSetId);
        },


        getDataSetGroupFunction: function (dataSetId) {
            let param = new URLSearchParams(), _this = this;
            param.append('userId', this.chartDatas.userId);
            param.append('dataset_id', dataSetId);
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/repEditController/getDataSetGroupFunction.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        _this.groupList = response.data.data;
                    } else {
                        _this.$message.error(_this.$t('i18n999') + response.data.message);
                    }
                },
                errorCallBack: function (error) {
                    _this.$message.error(_this.$t('i18n1000'));
                }
            })


        },


        //排序改变
        setOrderType: function (item) {
            if (item.orderType == 'desc') {
                item.orderType = 'asc';
            } else if (item.orderType == 'asc') {
                item.orderType = '';
            } else {
                item.orderType = 'desc'
            }
            for (let i = 0; i < this.dataSet.dataConfig.order.length; i++) {
                if (this.dataSet.dataConfig.order[i].colId == item.colId) {
                    if (item.orderType = '') {
                        this.dataSet.dataConfig.order.splice(i, 1);
                    } else {
                        this.dataSet.dataConfig.order[i] = this._.cloneDeep(item);
                    }

                } else {
                    this.dataSet.dataConfig.order.push(this._.cloneDeep(item));
                }
            }

        },
        toggleEnableDrill: function (item, index) {
            let boolValue = item.isEnableDrill, cloneDimItem = undefined;
            let dimItem = this.dataSet.dataConfig.dimension[index];
            if (this.dataSet.dataConfig.drillCloneDim) {
                cloneDimItem = this.dataSet.dataConfig.drillCloneDim[index];
            }
            if (!boolValue) {
                //如果已有树形或者下钻，先取消
                this.checkDrillOrTree();
                let timeStamp = new Date().getTime()
                this.$set(dimItem, 'isEnableDrill', 'drill_' + timeStamp);
                if (cloneDimItem) {
                    this.$set(cloneDimItem, 'isEnableDrill', 'drill_' + timeStamp)
                }
                if (this.chartDatas.currentModel.options.setStyle.newTable) {
                    let _binds = this.chartDatas.currentModel.options.setStyle.tableDesing.binds;
                    for (let key in _binds) {
                        if (_binds[key].colId == dimItem.colId) {
                            _binds[key].isEnableDrill = 'drill_' + timeStamp;
                            this.chartDatas.currentModel.options.setStyle.tableDesing.isEnableDrill[key] = dimItem.colId;
                        }
                    }
                }
                this.findAllDimLevels(dimItem.dimId, dimItem.dimLevel, timeStamp, index);
            } else {
                this.removeDimLevel(boolValue);
                this.$set(dimItem, 'isEnableDrill', false);
                if (cloneDimItem) {
                    this.$set(cloneDimItem, 'isEnableDrill', false)
                }
                // 让表格自动还原顶层的配置
                if (this.chartDatas.currentModel.drillCloneQuery) {
                    this.chartDatas.currentModel.drillCloneQuery.dimension = this._.cloneDeep(
                        this.chartDatas.currentModel.options.setData.dataConfig.drillCloneDim
                    );
                    this.chartDatas.currentModel.drillCloneQuery.filter = this._.cloneDeep(
                        this.chartDatas.currentModel.options.setData.dataConfig.drillCloneFilter
                    );
                    this.chartDatas.currentModel.drillCloneQuery.pageParam.pageIndex = 1;
                    // this.chartDatas.currentModel.drillPrototype = [];
                    // if(this.chartDatas.currentModel.options.setStyle.newTable){
                    //     this.chartDatas.currentModel.options.setStyle.tableDesing.binds = this._.cloneDeep(
                    //     this.chartDatas.currentModel.options.setData.dataConfig.drillCloneBind
                    // );
                    // }
                }
                if (this.chartDatas.currentModel.options.setStyle.newTable) {
                    this.chartDatas.currentModel.options.setStyle.tableDesing.isEnableDrill = {};
                    let _binds = this.chartDatas.currentModel.options.setStyle.tableDesing.binds;
                    for (let key in _binds) {
                        if (_binds[key].colId == dimItem.colId) {
                            _binds[key].isEnableDrill = undefined;
                            _binds[key].colId = dimItem.colId;
                            _binds[key].colNameCn = dimItem.colNameCn;
                            _binds[key].dimLevel = dimItem.dimLevel;
                            _binds[key].systemDimLevelId = dimItem.systemDimLevelId;
                            _binds[key].colAlias = 'dim_' + _binds[key].dimId + '_' + _binds[key].dimLevel;
                        }
                    }
                }
                // this.$nextTick(function () {
                //    this.$set(this.chartDatas.currentModel.options.setData, "isReflush", true);
                // });
            }
            // this.$set(this.dataSet,'enableData' ,'error');
            // this.reflushData();
        },
        /**
         * 自定义分组维度
         */
        toggleGroupData(item, index) {
            if (item['groupBy']) {
                this.$set(item, 'groupBy', false)
            } else {
                this.$set(item, 'groupBy', true)
            }
        },
        /**
         * 树形
         * item 当前对象
         * index 序号
         */
        toggleTreeData(item, index) {
            let boolValue = item.isTreeData, cloneDimItem = undefined;
            let dimItem = this.dataSet.dataConfig.dimension[index];
            if (this.dataSet.dataConfig.drillCloneDim) {
                cloneDimItem = this.dataSet.dataConfig.drillCloneDim[index];
            }
            if (!boolValue) {
                //如果已有树形或者下钻，先取消

                this.checkDrillOrTree();
                this.$set(item, 'isTreeData', true)
                this.findAllDimLevels(dimItem.dimId, dimItem.dimLevel, new Date().getTime(), index, true);
            } else {
                this.$set(item, 'isTreeData', false)
                this.dataSet.dataConfig.treeDataDrill = null;
                delete this.chartDatas.currentModel.drillCloneQuery;
            }

        },

        // 切换维度是否启用合计
        toggleSubAgg(item){
            item.isSubAggDim = !item.isSubAggDim;
            this.$forceUpdate();
        },

        checkDrillOrTree() {
            this.dataSet.dataConfig.dimension.forEach((item, index) => {
                if (item.isTreeData) this.toggleTreeData(item, index);
                else if (item.isEnableDrill) this.toggleEnableDrill(item, index);
            })
        },
        findAllDimLevels: function (dimId, dimLevel, timeStamp, index, isTreeData) {
            let tmp = {};
            tmp.id = 'drill_' + timeStamp;
            tmp.property = dimId + '_' + dimLevel;
            tmp.linkIndex = index;
            tmp.list = [];
            let dims = this.getDataForDimension;
            for (let i = 0; i < dims.length; i++) {
                if (dims[i].dimId == dimId && dims[i].dimLevel >= dimLevel) {
                    tmp.list.push(dims[i]);
                }
            }
            tmp.list = this._.sortBy(tmp.list, ['level']);
            if (!this.dataSet.dataConfig.drillList) {
                this.dataSet.dataConfig.drillList = []
            }
            if (isTreeData) this.dataSet.dataConfig.treeDataDrill = this._.cloneDeep(tmp);
            else this.dataSet.dataConfig.drillList.push(this._.cloneDeep(tmp));
        },
        findDimInDrillList: function (boolValue) {
            //找到对应的下钻维度组
            let drillList = this.dataSet.dataConfig.drillList;
            if (!drillList || drillList.length == 0) {
                return -1
            }
            for (let i = 0; i < drillList.length; i++) {
                if (drillList[i].id == boolValue) {
                    return i
                }
            }
            return -1
        },
        removeDimLevel: function (boolValue) {
            //删除已选择的下钻维度组
            let index = this.findDimInDrillList(boolValue);
            if (index < 0) {
                return;
            }
            // this.dataSet.dataConfig.drillList.splice(index,1);
            this.$delete(this.dataSet.dataConfig.drillList, index)
        },
        deleteDrillItem: function (item, index) {
            item.list.splice(index)
            if (item.list.length == 0) {
                // this.reflushData();
                this.removeDimLevel(item.id);
                this.$set(this.dataSet.dataConfig.dimension[item.linkIndex], 'isEnableDrill', false);
            }
            this.$forceUpdate();//不建议使用$forceUpdate方法，回头应该查找不自动更新渲染的原因
        },
        selectGruop: function (value) {
            if (value[0].clumType == "dimension") {
                value[0].group = value[0].group == value[1] ? '' : value[1];
                value[0].shortCode = value[0].shortCode == value[2] ? '' : value[2];
                var arr = value[0].colAlias.split("_");
                if (arr.length == 2) {
                    value[0].colAlias = value[0].colAlias + "_" + value[1];
                } else {
                    if (value[0].group == "") {
                        value[0].colAlias = value[0].colAlias.substr(0, value[0].colAlias.lastIndexOf("_"));
                    } else {
                        value[0].colAlias = value[0].colAlias.substr(0, value[0].colAlias.lastIndexOf("_")) + "_" + value[1];
                    }

                }
            } else {
                value[0].group = value[0].group == value[1] ? '' : value[1];
                value[0].shortCode = value[0].shortCode == value[2] ? '' : value[2];
            }
            // 标注已修改指标函数
            this.$set(this.dataSet.dataConfig, 'isEditedGDL', value[0].colId);
        },
        showFilterPop: function (index) {
            //循环判断哪些数据有别名
            for (let i = 0; i < this.getDataForDimension.length; i++) {
                for (let j = 0; j < this.dataSet.dataConfig.dimension.length; j++) {
                    if (this.dataSet.dataConfig.dimension[j].noteName != "" || this.dataSet.dataConfig.dimension[j].noteName != undefined) {
                        if (this.getDataForDimension[i].colId == this.dataSet.dataConfig.dimension[j].colId) {
                            this.getDataForDimension[i].noteName = this.dataSet.dataConfig.dimension[j].noteName;
                        }
                    }
                }
            }
            for (let i = 0; i < this.getDataForIndicator.length; i++) {
                for (let j = 0; j < this.dataSet.dataConfig.indicator.length; j++) {
                    if (this.dataSet.dataConfig.indicator[j].noteName != "" || this.dataSet.dataConfig.indicator[j].noteName != undefined) {
                        if (this.getDataForIndicator[i].colId == this.dataSet.dataConfig.indicator[j].colId) {
                            this.getDataForIndicator[i].noteName = this.dataSet.dataConfig.indicator[j].noteName;
                        }
                    }
                }
            }


            //判断当前控件是否已经指定数据集
            if (!this.chartDatas.currentModel.options.setData.dataConfig.dataSetId
                || this.chartDatas.currentModel.options.setData.dataConfig.dataSetId == "") {
                this.$message.warning(this.$t('i18n1162'));
                return;
            }
            let currModelConfig = this.chartDatas.currentModel;
            delete currModelConfig.drillCloneQuery;
            this.$set(currModelConfig, 'drillPrototype', []);
            delete currModelConfig.searchFilter;

            if (!!currModelConfig.options.setData.dataConfig.drillCloneDim) {
                let tmp = this._.cloneDeep(currModelConfig.options.setData.dataConfig.drillCloneDim);
                this.$set(this.dataSet.dataConfig, 'dimension', tmp);
                delete currModelConfig.options.setData.dataConfig.drillCloneDim;
            }
            if (!!currModelConfig.options.setData.dataConfig.drillCloneFilter) {
                let tmp = this._.cloneDeep(currModelConfig.options.setData.dataConfig.drillCloneFilter);
                this.$set(this.dataSet.dataConfig, 'filter', tmp);
                delete currModelConfig.options.setData.dataConfig.drillCloneFilter;
            }
            if (currModelConfig.options.setStyle.table && currModelConfig.options.setStyle.table.isUserPage) {
                currModelConfig.options.setData.dataConfig.pageParam.pageSize = currModelConfig.options.setStyle.table.pageSize;
                currModelConfig.options.setStyle.table.pageIndex = currModelConfig.options.setData.dataConfig.pageParam.pageIndex = 1;
            }


            //查询控件单独弹出
            if ("search" == this.type) {
                this.filtersConfig.searchShow = true;
                console.log(this.filtersConfig);
                this.filtersConfig.showFilterCharts = [];
                for (let i = 0; i < this.chartDatas.chartLists.length; i++) {
                    if (this.chartDatas.chartLists[i].id != this.chartDatas.currentModel.id && this.chartDatas.chartLists[i].type != "search") {//非控件本身，且不为搜索控件
                        let isAddUnion = false;

                        if (this.chartDatas.currentModel.options.setData.dataConfig.dataSetId == this.chartDatas.chartLists[i].options.setData.dataConfig.dataSetId) {  //使用相同数据集
                            isAddUnion = true
                        } else {
                            //如果数据集不相同，查找是否有挂载相同系统维度的维度项
                            let dimensionLevelItems = this.chartDatas.chartLists[i].options.setData.dataConfig.dimensionLevelItems;
                            //let
                            if (dimensionLevelItems) {
                                let filters = this.chartDatas.currentModel.options.setData.dataConfig.filter;
                                for (let n = 0; n < filters.length; n++) {
                                    let configs = filters[n].config
                                    for (let m = 0; m < configs.length; m++) {
                                        if (configs[m].systemDimId) {
                                            for (let j = 0; j < dimensionLevelItems.length; j++) {
                                                if (configs[m].systemDimId == dimensionLevelItems[j].systemDimId
                                                    && configs[m].systemDimLevelId == dimensionLevelItems[j].systemDimLevelId) { //属于同一个系统维度，且包含当前的维度层级
                                                    isAddUnion = true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (isAddUnion) {
                            let chartListsItem = this._.cloneDeep(this.chartDatas.chartLists[i]);
                            chartListsItem.selected = false;
                            if (this.chartDatas.currentModel.unionCharts) {
                                console.log(JSON.parse(JSON.stringify(this.chartDatas)));
                                for (let y = 0; y < this.chartDatas.currentModel.unionCharts.length; y++) {
                                    if (this.chartDatas.currentModel.unionCharts[y] == chartListsItem.id) {
                                        chartListsItem.selected = true;
                                    }
                                }
                            }
                            //如果组件的数据集来源和搜索组件定义的数据不是同一个数据集，则需标示选择相同的系统维度
                            let chartSetId = chartListsItem.options.setData.dataConfig.dataSetId;
                            //搜索组件绑定的数据集ID
                            this.filtersConfig.showFilterCharts.push(chartListsItem);
                        }
                    }
                    /*
                                            if (this.chartDatas.chartLists[i].id != this.chartDatas.currentModel.id
                                                && this.chartDatas.currentModel.options.setData.dataConfig.dataSetId ==
                                                this.chartDatas.chartLists[i].options.setData.dataConfig.dataSetId &&
                                                this.chartDatas.chartLists[i].type != "search"
                                            ) {
                                                let chartListsItem = this._.cloneDeep(this.chartDatas.chartLists[i]);
                                                chartListsItem.selected = false;
                                                if (this.chartDatas.currentModel.unionCharts) {
                                                    for (let y = 0; y < this.chartDatas.currentModel.unionCharts.length; y++) {
                                                        if (this.chartDatas.currentModel.unionCharts[y] == chartListsItem.id) {
                                                            chartListsItem.selected = true;
                                                        }
                                                    }

                                                }
                                                this.filtersConfig.showFilterCharts.push(chartListsItem);
                                            }

                                            */





                }
                this.filtersConfig.filterData.length = 0;
                this.$nextTick(function () {
                    this.isSelectChart();
                    this.$emit("selectSearchThisFilterItem");
                    //filterItemType
                    if (document.getElementsByName("filterItem").length > 0) {
                        let type = document.getElementsByName("filterItem")[0].getAttribute("filterItemType");
                        if (type == "indicator") {
                            this.searchActiveNames = "1";
                        } else {
                            this.searchActiveNames = "2";
                        }
                        document.getElementsByName("filterItem")[0].click();
                    }
                });
            } else {
                // 单个控件内部数据过滤
                this.filtersConfig.showControlClumFilter = true;
                //当前控件是否添加默认过滤项
                if (this.dataSet.dataConfig.filter.length == 0) {
                    this.addFilterData(-1);
                } else {
                    for (let i = 0; i < this.dataSet.dataConfig.filter.length; i++) {
                        if (!this.dataSet.dataConfig.filter[i].groupGroupLogicType || this.dataSet.dataConfig.filter[i].groupGroupLogicType == '') {
                            this.dataSet.dataConfig.filter[i].groupGroupLogicType = 'and'
                        }
                    }
                }


            }
            this.doCheckDimensionOptionSession(true);
            /*   if(!this.chartDatas.currentModel.doCheckDimensionOptionSession){

                   this.chartDatas.currentModel.doCheckDimensionOptionSession = true;
               }*/

        },
        selectThisFilterItem: function (index) {
            this.filtersConfig.activeIndex = index;
        },
        //关闭窗口
        clearFilterItemData: function () {
            this.filterClumsIndex = 0;
            this.filterClumsIndex2 = 1;
            this.filtersConfig.filterItem = {};
        },
        //关闭过滤条件配置框时，保存数据到当前控件中
        saveFilterDataToChart: function () {
            //切换字段，保存当前配置信息
            if (this.chartDatas.currentModel.global.show != undefined) {
                this.chartDatas.currentModel.global.show = false
            }
            for (let i = 0; i < this.dataSet.dataConfig.filter[0].config.length; i++) {
                if (this.dataSet.dataConfig.filter[0].config[i].colId == this.filtersConfig.filterItem.colId) {
                    // this.dataSet.dataConfig.filter[0].config[i].condition =
                    //     this._.cloneDeep(this.filtersConfig.filterData)
                    this.$set(this.dataSet.dataConfig.filter[0].config[i], 'condition', this._.cloneDeep(this.filtersConfig.filterData))
                    this.$set(this.dataSet.dataConfig.filter[0].config[i], 'relation', this._.cloneDeep(this.filtersConfig.filterItem.relation))
                    break;
                }
            }
            this.$nextTick(function () {
                this.chartDatas.currentModel.global.show = true
            })
            this.clearFilterItemData();
        },
        translateFilterOptions:function(options){
            debugger;
          return options.map(el=>{el.name=this.$t(`fi18nOperator_${el.conditionOperator}`);return el})
        },
        /**
         * 查询控件单独处理字段选中事件
         * @param item
         */
        selectSearchThisFilterItem: function (item) {
            if (item.colId == this.filtersConfig.filterItem.colId) {
                return;
            }//点击相同字段不执行
            //切换字段配置过滤条件，先保存当前配置
            this.saveFilterDataToChart();

            //过滤编辑字段改变时，将当前的编辑信息存放到对象中宏
            for (let i = 0; i < this.dataSet.dataConfig.filter[0].config.length; i++) {
                if (this.dataSet.dataConfig.filter[0].config[i].colId == this.filtersConfig.filterItem.colId) {
                    this.dataSet.dataConfig.filter[0].config[i].condition =
                        this._.cloneDeep(this.filtersConfig.filterData);
                    break;
                }
            }
            this.filtersConfig.filterItem = item;//缓存当前点击的过滤条件字段属性
            this.getDimensionOption(this.filtersConfig.filterItem);//获取维度过滤条件可用枚举值
            //赋值filterData用于动态显示  config
            this.filtersConfig.filterData = []; //先清空
            for (let i = 0; i < this.dataSet.dataConfig.filter[0].config.length; i++) {
                if (this.dataSet.dataConfig.filter[0].config[i].colId == item.colId) {
                    this.filtersConfig.filterData =
                        this._.cloneDeep(this.dataSet.dataConfig.filter[0].config[i].condition ? this.dataSet.dataConfig.filter[0].config[i].condition : []);
                    break;
                }
            }
            if (item.clumType == "indicator" || item.clumType == "expression") { //指标或临时指标
                this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["indicator_*"]);
            } else {
                // 0 普通   1枚举下拉选  10 年  11 月  12 日
                switch (this.valueCtrTypeByDimLevelId[item.colId] + "") {
                    case "0":
                        this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["input_level_*"])
                        break;
                    case "1":
                        this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["option_level_*"])
                        break;
                    case "10":
                        this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["date_level_*"])
                        break;
                    case "11":
                        this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["date_level_*"])
                        break;
                    case "12":
                        this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["date_level_*"])
                        break;
                    default:
                        this.searchFilterOptions = this.translateFilterOptions(this.operatorbylabel["input_level_*"])
                }
            }
        },

        buildSearchFilterOptionsMap: function () {
            this.filtersConfig.searchFilterOptionsMap["0"] = this.operatorbylabel["input_level_*"];
            this.filtersConfig.searchFilterOptionsMap["1"] = this.operatorbylabel["option_level_*"];
            this.filtersConfig.searchFilterOptionsMap["10"] = this.operatorbylabel["date_level_*"];
            this.filtersConfig.searchFilterOptionsMap["11"] = this.operatorbylabel["date_level_*"];
            this.filtersConfig.searchFilterOptionsMap["12"] = this.operatorbylabel["date_level_*"];
            this.filtersConfig.searchFilterOptionsMap["defual"] = this.operatorbylabel["input_level_*"];
            this.filtersConfig.searchFilterOptionsMap["indicator"] = this.operatorbylabel["indicator_*"];
            this.filtersConfig.searchFilterOptionsMap["file"] = this.operatorbylabel["file_level_*"];
            console.log("this.filtersConfig.searchFilterOptionsMap======", this.filtersConfig.searchFilterOptionsMap)
        },

        doCheckDimensionOptionSession: function (flag) {
            console.log(this.$t('i18n1163'));
            let filterModel = this.chartDatas.currentModel.options.setData.dataConfig.filter;
            if (filterModel) {
                for (let j = 0; j < filterModel.length; j++) {
                    if (filterModel[j].config) {
                        for (let i = 0; i < filterModel[j].config.length; i++) {
                            this.getDimensionOption(filterModel[j].config[i], null, flag);
                        }
                    }
                }
            }
        },
        //获取维度选项
        getDimensionOption: function (filterItemModel, pushDefualValueFun, flag) {
            //dimensionOptionSession
            if ((filterItemModel.dimLevelId && flag &&
                !this.dimensionOptionSession[filterItemModel.dimId + "_" + filterItemModel.dimLevel]) ||
                (filterItemModel.dimLevelId && !flag &&
                    !this.dimensionOptionSession[filterItemModel.dimId + "_" + filterItemModel.dimLevel + 'formeiju'])
            ) {
                let param = new URLSearchParams(), _this = this;
                param.append('userId', this.chartDatas.userId);
                param.append('dataSetId', this.chartDatas.currentModel.options.setData.dataConfig.dataSetId);
                param.append('dimLevelId', filterItemModel.colId);
                if (flag) {
                    param.append('pageStart', 1);
                    param.append('pageSize', this.limitSize);
                }
                if (filterItemModel.dimScale >= this.limitSize && flag) {
                    _this.dimensionOptionSession[filterItemModel.dimId + "_" + filterItemModel.dimLevel] = [];
                    if (pushDefualValueFun) {
                        pushDefualValueFun(filterItemModel);
                    }
                    return;
                }
                this.$common.requireBackData({
                    type: 'post',
                    url: '/ssa/biReport/searchDimLevelValue.action',
                    param: param,
                    successCallBack: function (response) {
                        if (response.data.status == 1) {
                            if (flag) {
                                if (response.data.data.length == _this.limitSize) {
                                    _this.dimensionOptionSession[filterItemModel.dimId + "_" + filterItemModel.dimLevel] = [];
                                } else {
                                    _this.dimensionOptionSession[filterItemModel.dimId + "_" + filterItemModel.dimLevel] = response.data.data;
                                }
                            } else {
                                _this.dimensionOptionSession[filterItemModel.dimId + "_" + filterItemModel.dimLevel + "formeiju"] = response.data.data;
                            }


                            _this.chartDatas.currentModel.options.setData.dimensionOptionSession = _this._.cloneDeep(_this.dimensionOptionSession);
                            if (pushDefualValueFun) {
                                pushDefualValueFun(filterItemModel);
                            }
                            _this.$forceUpdate();
                        } else {
                            _this.$message.error(_this.$t('i18n199') + response.data.msg);
                        }
                    },
                    errorCallBack: function (error) {
                        _this.$message.error(_this.$t('i18n210'));
                    }
                })

            } else {
                if (pushDefualValueFun) {
                    pushDefualValueFun(filterItemModel);
                }
            }

        },
        /**
         * 获取系统维度内容
         */
        getSysDimensionOption(id) {
            let that = this
            this.editDynamicParameterObj.paramDimItem = this._.cloneDeep(this.systemDimsLevels[id][0]);
            if (!this.sysDimensionOptionSession[id + '_' + this.editDynamicParameterObj.paramDimItem.dimLevel]) {
                let param = new URLSearchParams();
                param.append('userId', this.chartDatas.userId);
                param.append('dimLevelId', this.editDynamicParameterObj.paramDimItem.dimLevelId);
                this.$common.requireBackData({
                    type: 'post',
                    url: '/ssa/biReport/searchSysDimLevelValueNew.action',
                    param: param,
                    successCallBack: (response) => {
                        if (response.data.status == 1) {
                            this.sysDimensionOptionSession[id + '_' + this.editDynamicParameterObj.paramDimItem.dimLevel] = response.data.data;
                            this.$forceUpdate();
                        } else {
                            this.$message.error(that.$t('i18n199') + response.data.msg);
                        }
                    },
                    errorCallBack: (error) => {
                        this.$message.error(that.$t('i18n210'));
                    }
                })

            }
        },
        changeValue: function (item) {
            if (item.isCover == "0" || item.isCover == undefined) {
                this.$set(item, "isCover", "1");
            } else {
                this.$set(item, "isCover", "0");
            }
        },
        deleteSelectedItem: function (selectedList, param) {
            for (var c = 0; c < selectedList.length; c++) {
                var flagSelectedList = false;
                var cCode = selectedList[c].code;
                for (var d = 0; d < param.length; d++) {
                    var dCode = param[d];
                    if (cCode == dCode) {
                        flagSelectedList = true;
                    }
                }
                if (!flagSelectedList) {
                    selectedList.splice(c, 1);
                    c--;
                }
            }
        },
        saveSelect: function (param, config, indexFlag) {
            var selectedList = config.condition[0].selectedItem;
            var optitionList = this.dimensionOptionSession[indexFlag];
            this.deleteSelectedItem(selectedList, param);
            for (var a = 0; a < param.length; a++) {
                var aCode = param[a];
                for (var b = 0; b < optitionList.length; b++) {
                    var bCode = optitionList[b].code;
                    if (aCode == bCode) {
                        selectedList.push(optitionList[b]);
                        continue;
                    }
                }
            }
        },
        saveSelect2: function (param, item, indexFlag) {
            var selectedList = item.selectedItem;
            var optitionList = this.dimensionOptionSession[indexFlag];
            this.deleteSelectedItem(selectedList, param);
            for (var a = 0; a < param.length; a++) {
                var aCode = param[a];
                for (var b = 0; b < optitionList.length; b++) {
                    var bCode = optitionList[b].code;
                    if (aCode == bCode) {
                        selectedList.push(optitionList[b])
                    }
                }
            }
        },
        remoteMethod(query, dimId, dimLevel, colId) {
            let _this = this;
            if (query !== '') {
                this.conditionLoading = true;
                let param = new URLSearchParams();
                param.append('likeName', query);
                param.append('userId', this.chartDatas.userId);
                param.append('dataSetId', this.chartDatas.currentModel.options.setData.dataConfig.dataSetId);
                param.append('dimLevelId', colId);
                param.append('pageStart', 1);
                param.append('pageSize', this.limitSize);
                this.$common.requireBackData({
                    type: 'post',
                    url: '/ssa/biReport/searchDimLevelValue.action',
                    param: param,
                    successCallBack: function (response) {
                        if (response.data.status == 1) {
                            /*_this.optionsByCondition[key] = response.data.data;*/
                            //_this.dimensionOptionSession[dimId + "_" + dimLevel] = response.data.data;
                            _this.$set(_this.dimensionOptionSession, dimId + "_" + dimLevel, response.data.data);
                            _this.conditionLoading = false;

                        } else {
                            _this.$message.error(_this.$t('i18n199') + response.data.msg);
                        }
                    },
                    errorCallBack: function (error) {
                        _this.$message.error(_this.$t('i18n200'));
                    }
                })
            } else {
                _this.$set(_this.dimensionOptionSession, dimId + "_" + dimLevel, []);
            }
        },

        /**
         * 删除过滤配置
         */
        deleteFilterItem: function (index) {
            // this.filtersConfig.filterData.splice(index, 1);//删除
            this.$delete(this.filtersConfig.filterData, index)
        },

        /**
         * 点击添加默认过滤条件
         * @param defualFilterType 切换为枚举类型时，默认添加1
         */
        addSearchFilter: function (defualFilterType) {
            if (this.filtersConfig.filterData.length > 1 && this.filtersConfig.filterItem.clumType == 'indicator') {
                this.$message.warning(this.$t('i18n1164'));
                return;
            }
            if (this.filtersConfig.filterData.length > 0 && this.filtersConfig.filterItem.clumType == 'dimension') {
                this.$message.warning(this.$t('i18n1165'));
                return;
            }
            //conditionMode[0].filterType = this.valueCtrTypeByDimLevelId[configModel.colId]=='1'?'1':'-1';
            let tmp = {
                "groupInnerLogicType": "and",
                "conditionValueType": "-1",//值类型(-1:普通,1:文件)
                "showType": "1", //条件选择方式（1：单层，2：树型）
                "filterType": defualFilterType ? defualFilterType : (this.valueCtrTypeByDimLevelId[this.filtersConfig.filterItem.colId] == '1' ? '1' : '-1'),//过滤类型(-1:条件过滤，1：枚举过滤)
                "filterLevel": "-1",//过滤级别类型：清单级别过滤(-1)/报表级别过滤(1)  暂时先不考虑
                "conditionOperator": 'EQ',//条件操作符
                "fileValue": {
                    "fileId": "",//文件类型过滤条件  文件Id
                    "fileName": ""  //文件名称
                },
                "values": '',//单个值，
                "isfill": true,
                "selectedItem": []//远程搜索缓存选中项

            };
            this.filtersConfig.filterData.push(tmp);
            //this.$set(this.filtersConfig.filterData,this.filtersConfig.filterData.length,tmp);

        },

        /**
         * 添加字段过滤条件
         */
        addClumFilterData: function (index) {
            this.dataSet.dataConfig.filter[index].config.push({
                "condition": [
                    {
                        "groupInnerLogicType": "and",//组内逻辑关系：or/and
                        "conditionValueType": "-1",//值类型(-1:普通,1:文件)
                        "filterType": "-1",//过滤类型(-1:条件过滤，1：枚举过滤)
                        "filterLevel": "-1",//过滤级别类型：清单级别过滤(-1)/报表级别过滤(1)
                        "conditionOperator": "",//条件操作符
                        "fileValue": {
                            "fileId": "",
                            "fileName": ""
                        },
                        "values": '',//单个值
                        "selectedItem": []//远程搜索缓存选中项
                    }
                ]
            });
        },
        /**
         * 添加图表内部的动态参数条件配置
         */
        addDyFilterData: function () {
            if (!this.dataSet.dataConfig.dyConfig) {
                this.$set(this.dataSet.dataConfig, 'dyConfig', []);
            }
            this.dataSet.dataConfig.dyConfig.push(this._.cloneDeep(this.filterDynamicParameterObj))
        },
        /**
         * 删除图表内部的某个动态参数绑定
         */
        deleteDyFilterData: function (index) {
            this.$delete(this.dataSet.dataConfig.dyConfig, index);
        },
        /*
        * 添加过滤分组
        * */

        addFilterData: function (index) {

            this.dataSet.dataConfig.filter.splice(index + 1, 0, {
                "groupGroupLogicType": "and",
                "groupName": this.$t('i18n59'),
                "config": []
            })
        },
        //删除过滤分组信息
        deleteFilterData: function (index) {
            if (this.$common.hasDimPartitionFilter(this.dataSet.dataConfig.filter[index])) {
                this.$message.error(`${this.$t('i18n1166')}!`);
                return;
            }
            this.dataSet.dataConfig.filter.splice(index, 1);
            if (index == 0) {
                this.addFilterData(0);
            }
        },

        /*
        * 删除过滤字段配置项
        * */
        deleteClumFilterData: function (index1, index2) {
            this.dataSet.dataConfig.filter[index1].config.splice(index2, 1);
        },
        /**
         * 过滤字段发生变化
         * @param index1
         * @param index2
         * @param pushDefualValueFun   是否添加默认值
         */
        configItemClumChange: function (index1, index2, pushDefualValueFun) {
            this.dataSet.dataConfig.filter[index1].config[index2];
            let conditionMode = this._.cloneDeep(this.dataSet.dataConfig.filter[index1].config[index2].condition);
            let configModel;
            for (let i = 0; i < this.getDataForDimension.length; i++) {
                if (this.dataSet.dataConfig.filter[index1].config[index2].colId == this.getDataForDimension[i].colId) {
                    configModel = this._.cloneDeep(this.getDataForDimension[i]);
                    break;
                }
            }
            for (let i = 0; i < this.getDataForIndicator.length; i++) {
                if (this.dataSet.dataConfig.filter[index1].config[index2].colId == this.getDataForIndicator[i].colId) {
                    configModel = this._.cloneDeep(this.getDataForIndicator[i]);
                    break;
                }
            }
            for (let i = 0; i < this.getDataForExpression.length; i++) {
                if (this.dataSet.dataConfig.filter[index1].config[index2].colId == this.getDataForExpression[i].colId) {
                    configModel = this._.cloneDeep(this.getDataForExpression[i]);
                    break;
                }
            }
            conditionMode[0].values = '';
            conditionMode[0].valueArr = [];
            conditionMode[0].conditionValueType = '-1';
            conditionMode[0].filterType = this.valueCtrTypeByDimLevelId[configModel.colId] == '1' ? '1' : '-1';
            configModel.condition = conditionMode;
            this.$set(this.dataSet.dataConfig.filter[index1].config, index2, configModel);
            this.filtersConfig.filterItem = configModel;
            this.getDimensionOption(this.filtersConfig.filterItem, pushDefualValueFun, true);
        },


        changeTabItem: function (item) {
            if (this.filtersConfig.filterItem.filterCheckType == '2' && this.filtersConfig.filterData.length == 0) {
                this.addSearchFilter("1");//枚举类型时默认添加过滤条件为-1
                let flag = false;
                this.doCheckDimensionOptionSession(flag);
            }
        },

        //选中联动控件
        unionCharChange: function (scope) {
            var row = scope.row;
            row.selected = !row.selected;
            this.$set(this.filtersConfig.showFilterCharts, scope.$index, row);
            this.chartDatas.currentModel.unionCharts = [];
            for (let i = 0; i < this.filtersConfig.showFilterCharts.length; i++) {
                if (this.filtersConfig.showFilterCharts[i].selected) {
                    this.chartDatas.currentModel.unionCharts.push(this.filtersConfig.showFilterCharts[i].id);
                    this.filtersConfig.filterItem['relation'] = []
                } else {
                    this.filtersConfig.filterItem['relation'] = []
                }
            }

        },
        unionCharSearchChange: function (showFilterCharts,) {
            this.chartDatas.currentModel.unionChartFilter[showFilterCharts.id] = {}
        },
        //当前行是否为选中
        isSelectChart: function () {
            if (this.chartDatas.currentModel.unionCharts) {
                for (let j = 0; j < this.filtersConfig.showFilterCharts.length; j++) {
                    for (let i = 1; i < this.chartDatas.currentModel.unionCharts.length; i++) {
                        if (this.filtersConfig.showFilterCharts[j].id ==
                            this.chartDatas.currentModel.unionCharts[i]) {
                            this.filtersConfig.showFilterCharts[j].selected = true;
                            this.$set(this.filtersConfig.showFilterCharts, j, this.filtersConfig.showFilterCharts[j]);
                        }
                    }
                }
            }
        },
        //保存当前选中的过滤文件信息
        saveFilterFileMasg: function (item) {
            if (this.filtersConfig.filterConItem.fileValue.fileId != item.file_id) {
                this.filtersConfig.filterConItem.fileValue.fileId = item.file_id;
                this.filtersConfig.filterConItem.fileValue.fileName = item.file_rel_name;
            } else {
                this.filtersConfig.filterConItem.fileValue.fileId = '';
                this.filtersConfig.filterConItem.fileValue.fileName = '';
            }

        },
        //打开文件弹窗
        showFilterFileWindow: function (item) {
            this.filtersConfig.isShowFilterFileWindow = true;//打开弹窗
            this.filtersConfig.filterConItem = item;//记录当前配置 子项
            //获取可用文件过滤条件
            // param.append('user_id', this.chartDatas.userId);
            this.getFilterFiles();
        },
        //获取当前用户可用的文件过滤条件
        getFilterFiles: function (msg) {
            let param = new URLSearchParams(), _this = this;
            param.append('user_id', this.chartDatas.userId);
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/repEditController/getFilterFiles.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        _this.filtersConfig.filterFiles = response.data.data.files;
                        if (msg) {
                            _this.filtersConfig.filterConItem.fileValue.fileId = msg.data.file_ID;
                            _this.filtersConfig.filterConItem.fileValue.fileName = msg.data.file_NAME;
                            _this.$message({
                                message: _this.$t('i18n192'),
                                type: 'success'
                            });
                        }
                    } else {
                        _this.$message.error(_this.$t('i18n1167') + response.data.msg);
                    }
                },
                errorCallBack: function (error) {
                    _this.$message.error(_this.$t('i18n1168'));
                }
            })
        },
        StopReflushData: function () {
            this.$delete(this.chartDatas.currentModel.options.setData, 'enableData');
        },
        reflushData: function () {
            if (this.chartDatas.currentModel.options.setData.dataConfig.searchType == '-9') {
                return;
            }
            //检查是否有必选条件未设置
            if (!this.$common.allDimPartitionCheck(this.chartDatas.currentModel.options.setData.dataConfig.filter)) {
                this.$message.error(this.$t('i18n760') + this.chartDatas.currentModel.global.name + `】${this.$t('i18n761')}!`)
                return;
            }
            // todo 传递参数给后台执行搜索，数据返回前台，赋值给控件对象，控件对象watch相关属性，发生变化，执行图表刷新
            let param = new URLSearchParams(), _this = this, currModelConfig = this.chartDatas.currentModel;
            if (currModelConfig.options.setStyle.newTable) {
                if (Object.keys(currModelConfig.options.setStyle.tableDesing.binds).length == 0) {
                    this.$message.error(`${_this.$t('i18n1169')}!`)
                    return;
                } else {
                    // let activeId = sessionStorage.getItem('active_'+currModelConfig.tableid);
                    this.$set(currModelConfig.options.setData, 'isCoverConfig', true);
                }
            }
            //删除指标趋势
            for (let i = 0; i < this.chartDatas.chartLists.length; i++) {
                if (this.chartDatas.chartLists[i].global.tableid) this.chartDatas.chartLists.splice(i--, 1);
            }
            for (let i = 0; i < this.chartDatas.tempChartLists.length; i++) {
                if (this.chartDatas.tempChartLists[i].global.tableid) this.chartDatas.tempChartLists.splice(i--, 1);
            }
            //如果存在下钻 还原表头配置
            if (currModelConfig.drillPrototype && currModelConfig.drillPrototype.length > 0 && currModelConfig.options.setStyle.table) {
                this.$common.setSelfHeadDataProp(currModelConfig['downDrillList'][0], currModelConfig.options.setStyle.table.theadData, currModelConfig.clickColIndexNow);
            }
            delete currModelConfig.options.setData.dataConfig.dyParam;
            // currModelConfig.options.setData.chartDataArr = [];
            this.$set(currModelConfig.options.setData, 'enableData', 'loading');
            this.$set(currModelConfig.options.setData, 'chartDataArr', []);
            this.$nextTick(function () {
                delete currModelConfig.drillCloneQuery;
                this.$set(currModelConfig, 'drillPrototype', []);
                this.$set(currModelConfig, 'searchFilter', null);
                if (!!currModelConfig.options.setData.dataConfig.drillCloneDim) {
                    let tmp = this._.cloneDeep(currModelConfig.options.setData.dataConfig.drillCloneDim);
                    if (this.dataSet.dataConfig.dimension) {
                        for (let i = 0; i < this.dataSet.dataConfig.dimension.length; i++) {
                            tmp[i].orderType = this.dataSet.dataConfig.dimension[i].orderType;
                            //编辑时下钻后切换为树形的情况
                            tmp[i].isTreeData = this.dataSet.dataConfig.dimension[i].isTreeData;
                        }
                    }

                    this.$set(this.dataSet.dataConfig, 'dimension', tmp);
                    delete currModelConfig.options.setData.dataConfig.drillCloneDim;
                }
                if (!!currModelConfig.options.setData.dataConfig.drillCloneFilter) {
                    let tmp = this._.cloneDeep(currModelConfig.options.setData.dataConfig.drillCloneFilter);
                    this.$set(this.dataSet.dataConfig, 'filter', tmp);
                    delete currModelConfig.options.setData.dataConfig.drillCloneFilter;
                }
                if (currModelConfig.options.setStyle.table && currModelConfig.options.setStyle.table.isUserPage) {
                    currModelConfig.options.setData.dataConfig.pageParam.pageSize = currModelConfig.options.setStyle.table.pageSize;
                    currModelConfig.options.setStyle.table.pageIndex = currModelConfig.options.setData.dataConfig.pageParam.pageIndex = 1;
                }
                if (currModelConfig.options.setStyle.table && !currModelConfig.options.setStyle.table.isUserPage) {
                    currModelConfig.options.setData.dataConfig.pageParam.pageSize = currModelConfig.options.setData.dataConfig.pageParam.defaultPageSize;
                    currModelConfig.options.setStyle.table.pageIndex = currModelConfig.options.setData.dataConfig.pageParam.pageIndex = 1;
                    currModelConfig.options.setData.dataConfig.report.size = true;
                }
                if (currModelConfig.options.setStyle.table && currModelConfig.options.setStyle.table.showSummary) {
                    currModelConfig.options.setData.dataConfig.isSum = true;
                }
                if (currModelConfig.options.setStyle.newTable && currModelConfig.options.setStyle.tableDesing.tableOpt.type == 'colTable') {
                    currModelConfig.options.setData.dataConfig.pageParam.pageIndex = 1;
                    currModelConfig.options.setStyle.newTable.pageSize = parseInt(currModelConfig.options.setData.dataConfig.pageParam.pageSize);
                }
                param.append('userId', this.chartDatas.userId);
                let dataConfigModel = this._.cloneDeep(currModelConfig.options.setData.dataConfig);
                //重构查询数据
                this.$common.rebuildDataConfig(this, dataConfigModel);
                console.log(`${this.$t('i18n355')}====dataConfigModel======`, dataConfigModel)


                    //测试汇总表格接口
                    if(currModelConfig.type=='summaryTable'){
                        dataConfigModel.subAggParam = {
                            open:true,
                            functionCode:'SUM',
                            scale:'ALL',
                            resultType:1
                        }
                    }



                param.append("requestJson", JSON.stringify(dataConfigModel));
                param.append("searchType", dataConfigModel.searchType);
                //记录使用次数
                this.$common.updateDataUseCount(dataConfigModel.dataSetId);
                //判断是否要查询列汇总数据
                if (dataConfigModel.isSum) {
                    this.$common.requireBackData({
                        type: 'post',
                        url: '/ssa/biReport/search.action',
                        param: param,
                        successCallBack: function (response) {
                            if (_this.chartDatas.currentModel.options.setData.enableData) {
                                if (response.data.status == 1) {
                                    _this.$set(currModelConfig.options.setData.dataConfig.report, 'sumData', response.data.data.data || []);
                                } else {
                                    // _this.$message.error('根据配置条件查询数据失败：' + response.data.msg);
                                    console.log(_this.$t('i18n76') + response.data.msg);
                                    _this.$message.error(_this.$t('i18n77'));
                                }
                            }

                        },
                        errorCallBack: function (error) {
                            // _this.$message.error('根据配置条件查询数据失败：查询接口失败');
                            console.log(_this.$t('i18n78'));
                            _this.$message.error(_this.$t('i18n77'));
                        }
                    })
                }

                let countParam = new URLSearchParams();
                countParam.append('userId', this.chartDatas.userId);
                countParam.append("searchType", dataConfigModel.searchType);
                dataConfigModel.isSum = false;
                countParam.append("requestJson", JSON.stringify(dataConfigModel));
                //判断是否需要查询总条数
                if (dataConfigModel.report.size == true) {
                    this.$common.requireBackData({
                        type: 'post',
                        url: '/ssa/biReport/search.action',
                        param: countParam,
                        successCallBack: function (response) {
                            if (_this.chartDatas.currentModel.options.setData.enableData) {
                                if (response.data.status == 1) {
                                    currModelConfig.options.setData.dataConfig.report.count = response.data.data.dataReport.SIZE;
                                    //  if(document.getElementById("dataCount_div_"+currModelConfig.id)) document.getElementById("dataCount_div_"+currModelConfig.id).innerHTML = response.data.data.dataReport.SIZE;
                                    /*  let msg= _this.$common.getPringMsg();
                                     _this.$common.waterMaker(currModelConfig.id,msg); */
                                } else {
                                    // _this.$message.error('根据配置条件查询数据失败：' + response.data.msg);
                                    console.log(_this.$t('i18n76') + response.data.msg);
                                    _this.$message.error(_this.$t('i18n77'));
                                }
                            }

                        },
                        errorCallBack: function (error) {
                            // _this.$message.error('根据配置条件查询数据失败：查询接口失败');
                            console.log(_this.$t('i18n78'));
                            _this.$message.error(_this.$t('i18n77'));
                        }
                    })
                }

                let sizeParam = new URLSearchParams();
                sizeParam.append('userId', this.chartDatas.userId);
                dataConfigModel.report.size = false;
                sizeParam.append("requestJson", JSON.stringify(dataConfigModel));
                sizeParam.append("searchType", dataConfigModel.searchType);
                this.$common.requireBackData({
                    type: 'post',
                    url: '/ssa/biReport/search.action',
                    param: sizeParam,
                    successCallBack: function (response) {
                        console.log(response);
                        if (_this.chartDatas.currentModel.options.setData.enableData) {
                            let chartDataArr;
                            if (response.data.status == 1) {
                                currModelConfig.sqlText = response.data.data.sql;
                                if (['table','newTable'].indexOf(currModelConfig.global.type)>-1) {
                                    chartDataArr = response.data.data.data
                                }else if(currModelConfig.global.type=='summaryTable'){
                                    chartDataArr = _this.$controlDataUtil.buildSummaryData(response.data.data.data,currModelConfig.options,{total:_this.$t('i18n1848'),subTotal:_this.$t('i18n1847')});
                                } else {
                                    chartDataArr = _this.buildChartData(response.data.data.data, currModelConfig.options.setData.dataConfig);
                                }

                            } else {
                                chartDataArr = []
                                // _this.$message.error('根据配置条件查询数据失败：' + response.data.msg);
                                _this.$set(currModelConfig.options.setData, 'enableData', true);
                                console.log(_this.$t('i18n76') + response.data.msg);
                                _this.$message.error(response.data.msg);
                            }
                            let msg = _this.$common.getPringMsg();
                            _this.$common.waterMaker(currModelConfig.id, msg);
                            console.log(`${_this.$t('i18n356')}======`, chartDataArr);
                            _this.$set(currModelConfig.options.setData, 'chartDataArr', chartDataArr);
                            _this.$set(currModelConfig.options.setData, 'enableData', true);
                            _this.$nextTick(function () {
                                _this.$set(currModelConfig.options.setData, 'isReflush', true);
                            })
                        }

                    },
                    errorCallBack: function (error) {
                        // _this.$message.error('根据配置条件查询数据失败：查询接口失败');
                        console.log(_this.$t('i18n78'));
                        _this.$message(_this.$t('i18n1170'));
                        _this.$set(currModelConfig.options.setData, 'enableData', 'error');
                    }
                })
            });
        },
        //重构查询数据
        /*     rebuildDataConfig:function(dataConfigModel){
                 for(let i=0;i<dataConfigModel.filter.length;i++){
                    for(let j=0;j<dataConfigModel.filter[i].config.length;j++){
                        for(let y=0;y<dataConfigModel.filter[i].config[j].condition.length;y++){
                            if(!(dataConfigModel.filter[i].config[j].condition[y].values instanceof Array)){
                                dataConfigModel.filter[i].config[j].condition[y].values = [this._.cloneDeep(dataConfigModel.filter[i].config[j].condition[y].values)]
                            }
                        }
                    }
                 }
             },*/
        filterChangeDate: function (date, paramOpt) {
            let _this = this;
            _this.dataSet.dataConfig.filter[paramOpt.groupIndex].config[paramOpt.conditionIndex].condition[0].values = date.split(',');
        },
        searchChangeDate: function (date, paramOpt) {
            let _this = this;
            _this.filtersConfig.filterData[paramOpt.itemIndex].values = date.split(',');
        },
        buildChartData: function (chartData, dataConfig) {
            /* if("dimension" == str){
                 clumMode.colAlias = clumMode.dimId+"_"+clumMode.dimLevel;
             }else if("indicator" == str){
                 clumMode.colAlias = "indicator_"+clumMode.colId;
             }*/
            let clumsTitle = [];
            let clumsName = [];
            let resultData = [];
            for (let i = 0; i < dataConfig.dimension.length; i++) {
                clumsTitle.push(dataConfig.dimension[i].dimId + "_" + dataConfig.dimension[i].dimLevel + "_NAME");
                clumsName.push(dataConfig.dimension[i].colNameCn);
            }
            for (let i = 0; i < dataConfig.indicator.length; i++) {
                clumsTitle.push("indicator_" + dataConfig.indicator[i].colId);
                clumsName.push(dataConfig.indicator[i].colNameCn);
            }
            resultData.push(clumsName);
            for (let i = 0; i < chartData.length; i++) {
                let itemArr = [];
                for (let j = 0; j < clumsTitle.length; j++) {
                    itemArr.push(chartData[i][clumsTitle[j]] || chartData[i][clumsTitle[j].substring(0, clumsTitle[j].lastIndexOf('_NAME'))]);
                }
                resultData.push(itemArr);
            }
            return resultData;
        },
        setPopWidth: function (type) {
            return type == 'search' ? '80%' : '500px'
        },
        showEditDimension: function (item, canEditAccuracy) {
            this.columIemVal = item;
            if (canEditAccuracy === false) { this.isCanEditAccuracy = canEditAccuracy; }
            this.isShowEditDimension = true;
        },
        showEditDy: function (item, canEditAccuracy) {
            this.dyIemVal = item;
            if (canEditAccuracy === false) { this.isCanEditAccuracy = canEditAccuracy; }
            this.isShowEditDy = true;
        },

        preViewFileData: function (item) {
            console.log(item)
            let param = new URLSearchParams(), _this = this;
            param.set('tableId', this.dataSet.dataConfig.dataSetId);
            param.set('fileId', item.file_id);
            param.set('pageStart', 1);
            param.set('pageSize', 20);
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/biFile/getFileDataListPage.action',
                param: param,
                successCallBack: function (response) {
                    if (response.data.status == 1) {
                        _this.setFileContextHeader(response.data.data.data);
                        _this.setFileContextBodyer(response.data.data.data);
                        _this.isShowFileContext = true;
                    } else {
                        _this.$message.error(_this.$t('i18n1171') + response.data.msg);
                    }
                },
                errorCallBack: function (error) {
                    _this.$message.error(_this.$t('i18n200'));
                }
            })
        },
        setFileContextHeader: function (arr) {
            this.fileContext.contextHead = [];
            if (arr.length > 0) {
                for (let key in arr[0]) {
                    this.fileContext.contextHead.push({ label: key, prop: key })
                }
            }
        },
        setFileContextBodyer: function (arr) {
            this.fileContext.contextBody = [];
            if (arr.length > 0) {
                for (let i = 0; i < arr.length; i++) {
                    this.fileContext.contextBody[i] = {}
                    for (let key in arr[i]) {
                        this.fileContext.contextBody[i][key] = arr[i][key]
                    }
                }
            }
        },
        //切换显隐层级维度
        toggleDimLevelItems: function (item) {
            let relId = item.relId;
            item.status = !item.status;
            for (let i = 0; i < this.getDataForDimension.length; i++) {
                if (this.getDataForDimension[i].dimId == relId) {
                    this.getDataForDimension[i].show = item.status;
                }
            }
        },
        /**
         * 打开动态参数编辑弹窗
         * @params(commonType)：打开弹窗时是编辑还是新增
         */
        showDynamicParameterDialog(commonType, item) {
            if (this.dataSet.dataConfig.dataSetId === '') {
                this.$message({
                    message: this.$t('i18n1172'),
                    type: 'warning'
                });
                return;
            }
            this.typeDynamicParameterDialog = commonType;
            if (commonType == 'add') {
                this.editDynamicParameterObj = {
                    relationParamKey: '',
                    relationParamName: '',
                    paramType: '',
                    paramRelation: '',
                    paramSysDimId: '',
                    paramValueSingle: '',
                    paramDefaultRule: '',
                    paramLabelSingle: '',
                    paramDimItem: undefined,
                    paramInputType:'',
                }
            } else {
                this.editDynamicParameterObj = item;
            }
            this.dynamicParameterConfigDialog = true;
        },
        /**
         * 删除当前已配置的动态参数
         */
        deleteDyParam(idx) {
            this.$delete(this.dataSet.dataConfig.dyConfig, idx);
        },
        showNewFieldDialog: function (classType, type, item) {
            if (this.dataSet.dataConfig.dataSetId === '') {
                this.$message({
                    message: this.$t('i18n1172'),
                    type: 'warning'
                });
                return;
            }
            this.editComputeObj = {//编辑计算字段对象
                openDialog: false,
                classType: '',//dim,gdl
                type: 'new',//new/edit
                titleLeft: this.$t('i18n525'),
                titleRight: this.$t('i18n250'),
                title: '',//标题
                appendToBody: true,
                members: [],
                openObj: [],
                funObj: [],//可用表达式数组
                viewName: '',//显示名称
                formatText: '',//表达式
                remarkText: ''//备注信息
            };
            let editObj = this.editComputeObj;
            editObj.type = type || 'new';
            editObj.classType = classType || 'gdl';
            editObj.funObj = this.addNewTemporaryFieldEnusedFuns;
            this.getDataForIndicator.forEach((item, index) => {
                editObj.members[index] = {
                    name: item.colNameCn,
                    id: item.colId
                }
            });
            editObj.titleLeft = type == 'edit' ? this.$t('edit') : this.$t('i18n525');
            editObj.titleRight = classType == 'dim' ? this.$t('i18n250') : this.$t('i18n251');
            if (editObj.type === 'new') {
                editObj.colId = this.dataSet.dataConfig.expression.length == 0 ? -1 : -1 + this.dataSet.dataConfig.expression[this.dataSet.dataConfig.expression.length - 1].colId;
                editObj.colAlias = 'indicator_' + editObj.colId;
            } else {
                editObj.colId = item.colId;
                editObj.viewName = item.colNameCn;
                editObj.colAlias = item.colAlias;
                editObj.formatText = item.showExpression;
                editObj.nickName = item.colAlias;
                editObj.remarkText = item.colDesc;
            }
            editObj.openDialog = true;
        },
        getNewFieldData: function (data, type) {
            console.log(data);
            let editType = type || 'new';
            if (editType === 'new') {
                this.dataSet.dataConfig.expression.push(data);
            } else {
                for (let i = 0; i < this.dataSet.dataConfig.expression.length; i++) {
                    if (this.dataSet.dataConfig.expression[i].colId == data.colId) {
                        this.$set(this.dataSet.dataConfig.expression, i, data);
                        break;
                    }
                }
            }
            this.$message({
                message: this.editComputeObj.type == 'new' ? this.$t('addSuccess') : this.$t('editSuccess'),
                type: 'success'
            });
            this.editComputeObj.openDialog = false;
        },
        bdatePicker(v) {
            let datePickers = { "10": { type: 'yearrange', formate: 'yyyy' }, "11": { type: 'monthrange', formate: 'yyyyMM' }, "12": { type: "daterange", formate: 'yyyyMMdd' } }
            let defaultDt = datePickers[v];
            if (defaultDt) {
                return defaultDt
            }
            return false;
        },
        handleCheckAllChange(type, val) {
            if (type == 'gdl') {
                this.checkedGdls = []
                if (val) {
                    this.getDataForIndicator
                        .filter(el => this.dataSet.dataConfig.indicator.findIndex(ele => ele.colId == el.colId) == -1)
                        .forEach(el => {
                            this.checkedGdls.push(el.colId);
                        })
                }
                this.checkGdlAll = val;
                this.isIndeterGdl = false
            }
            if (type == 'dim') {
                this.checkedDims = []
                if (val) {
                    this.getDataForDimension
                        .filter(el => el.clumType != 'group')
                        .filter(el => this.dataSet.dataConfig.dimension.findIndex(ele => ele.colId == el.colId) == -1)
                        .forEach(el => {
                            this.checkedDims.push(el.colId);
                        })
                }
                this.checkDimAll = val;
                this.isIndeterDim = false
            }
        },
        handleCheckedGdlChange(type, val) {
            let checkedCount = val.length;
            if (type == 'gdl') {
                let seletedGdl = this.dataSet.dataConfig.indicator.length;
                this.checkGdlAll = checkedCount === this.getDataForIndicator.length - seletedGdl;
                this.isIndeterGdl = checkedCount > 0 && checkedCount < this.getDataForIndicator.length - seletedGdl;
            }
            if (type == 'dim') {
                let seletedDim = this.dataSet.dataConfig.dimension.length;
                let dimEnableLength = this.getDataForDimension.filter(el => el.clumType != 'group').length;
                this.checkDimAll = checkedCount === dimEnableLength - seletedDim;
                this.isIndeterDim = checkedCount > 0 && checkedCount < dimEnableLength - seletedDim;
            }
        },
        col2out(type, $event) {
            if (type == 'gdl') {
                this.checkedGdls.forEach(el => {
                    let gdl = this.getDataForIndicator.find(ele => ele.colId == el);
                    this.dragItem = gdl
                    this.dropendDo('indicator', $event)
                })
                this.checkedGdls = []
            }
            if (type == 'dim') {
                this.checkedDims.forEach(el => {
                    let dim = this.getDataForDimension.filter(el => el.clumType != 'group').find(ele => ele.colId == el);
                    this.dragItem = dim
                    //todo 2022-08-30
                    this.dragItem.groupBy = true;
                    this.dropendDo('dimension', $event)
                })
                this.checkedDims = []
            }
        },
        handleChangeSelectType(item) {
            item.values = [];
            item.labels = [];
        },
        /**
         * dropTree数据选择时执行事件
         */
        changeFormVal(e, item, config) {
            if (item.conditionOperator == 'IN' || item.conditionOperator == 'NOTIN') {
                item.values = e.code;
                item.labels = e.name;
                if (e.blockLevel !== undefined) { item.blockLevel = e.blockLevel };
            } else {
                item.values = e.code[0];
                item.labels = e.name[0];
            }
            item.selectedItem = []

        },
        changeFormVal2(e, item, config) {
            this.editDynamicParameterObj.paramValueSingle = e.code[0];
            this.editDynamicParameterObj.paramLabelSingle = e.name[0];
        },
        updataTopData(data) {
            this.dimensionOptionSession[this.filtersConfig.filterItem.dimId + '_' + this.filtersConfig.filterItem.dimLevel] = data;
        },
        /**解析sql参数 */
        configParams(item, filterItem) {
            this.$refs['dyParamsConfig'].buildSqlParamSelectOption(item, filterItem);
        },
        /**
         * 切换动态参数的类型
         */
        handleChangeDyType() {
            this.editDynamicParameterObj.paramRelation = '';
            this.editDynamicParameterObj.paramValueSingle = '';
            if(this.editDynamicParameterObj.paramType=='date'){
                this.$set(this.editDynamicParameterObj,'paramDefaultRule',-1);
            }
            this.editDynamicParameterObj.paramLabelsSingle = ''
        },
        handleChangeDyLevel() {
            this.editDynamicParameterObj.paramValueSingle = '';
            if(this.editDynamicParameterObj.paramType=='date'){
                this.$set(this.editDynamicParameterObj,'paramDefaultRule',-1);
            }else{
                this.$set(this.editDynamicParameterObj,'paramDefaultRule','');
            }
            this.editDynamicParameterObj.paramLabelsSingle = ''
        },
        handleChangeDyLevelInput(){

        },
        /**
         * 拿到系统维度，并去除账期
         */
        getSystemDims() {
            let param = new URLSearchParams()
            param.append('type', 'name');
            param.append('keyWord', '');
            param.append('pageStart', 1);
            param.append('pageSize', 100);
            this.$common.requireBackData({
                type: 'post',
                url: '/ssa/biDim/queryDim.action',
                param: param,
                successCallBack: (response) => {
                    if (response.data.status == 1) {
                        this.systemDims = response.data.data.data.filter(item => item.datasource_ins_id != null);
                        //查询所有维度层级并缓存
                        this.getAllSysDimLevels(this.systemDims);
                    } else {
                        this.$message.error(response.data.msg || 'error');
                    }
                }
            });
        },
        /**
         * 检查某个维度是否账期维度
         */
        checkIsDateDim(item){
            let valCtrlType = this.dataSet.dataConfig.valueCtrTypeByDimLevelId[item.colId];
            if(valCtrlType>=10 && valCtrlType<=12){
                return true;
            }else{
                return false;
            }
        },
        /**
         * 查询所以系统维度层级
         */
        getAllSysDimLevels(dims) {
            dims.forEach(item => {
                if (!this.systemDimsLevels[item.dim_id]) { this.systemDimsLevels[item.dim_id] = [] }
                if (this.systemDimsLevels[item.dim_id].length == 0) {
                    let param = new URLSearchParams()
                    param.append('dim_id', item.dim_id);
                    this.$common.requireBackData({
                        type: 'post',
                        url: '/ssa/biDim/queryDimLevelById.action',
                        param: param,
                        successCallBack: (response) => {
                            if (response.data.status == 1) {
                                // this.systemDimsLevels[item.dim_id]=response.data.data;
                                let _tmp = [];
                                response.data.data.forEach(obj => {
                                    _tmp.push({
                                        dimId: obj.dim_id,
                                        dimLevel: obj.dim_level,
                                        dimLevelId: obj.dim_level_id,
                                        colId: obj.dim_level_id,
                                        dimLevelName: obj.dim_level_name,
                                        dimName: obj.dim_level_code,
                                        dimPartitionFlag: null,
                                        dimScale: obj.dim_level_scale,
                                        group: true,
                                        reMark: null,
                                        systemDimId: obj.dim_id,
                                        systemDimLevelId: obj.dim_level
                                    })
                                });
                                this.systemDimsLevels[item.dim_id] = _tmp;
                            }
                        }
                    });
                }
            })
        },
        /**
         * 关闭动态参数配置弹窗
         */
        handleCloseDynamicParameterDialog() {
            this.editDynamicParameterObj = {
                relationParamKey: '',
                relationParamName: '',
                paramType: '',
                paramRelation: '',
                paramSysDimId: '',
                paramValueSingle: '',
                paramLabelSingle: '',
                paramDimItem: undefined,
                paramInputType:'',
            };
            this.dynamicParameterConfigDialog = false;
        },
        /**
         * 保存动态参数配置并关闭弹窗
         */
        handleSaveDynamicParameterDialog() {
            if (!this.dataSet.dataConfig.dyConfig) {
                this.$set(this.dataSet.dataConfig, 'dyConfig', [])
            }
            if (this.typeDynamicParameterDialog == 'add') {
                this.dataSet.dataConfig.dyConfig.push(this._.cloneDeep(this.editDynamicParameterObj));
            }
            this.handleCloseDynamicParameterDialog();
        }
    },
    computed: {
        ...mapGetters(['chartDatas', 'sqlOutClumsSession']),
        getIcon() {
            return function (type, name, id) {
                let _this = this;
                let nameArr = name.split(".");
                let nameStyle = nameArr[nameArr.length - 1].toLowerCase();
                if (type == 'class') {
                    let obj = {
                        'iconfont': true,
                        'icon-excel': true,
                        'icon-csv': false
                    }
                    if (nameStyle == 'csv') {
                        obj['icon-excel'] = false;
                        obj['icon-csv'] = true;
                    }
                    return obj;
                } else {
                    let obj = {
                        'active': false,
                        'fileBox': true,
                        'orange': true,
                        'blue': false
                    }
                    if (nameStyle == 'csv') {
                        obj['orange'] = false;
                        obj['blue'] = true;
                    }
                    if (_this.filtersConfig.filterConItem.fileValue.fileId == id) {
                        obj['active'] = true;
                    }
                    return obj;
                }
            }
        },
        getTempleteImg() {
            return function (type) {
                let _this = this;
                var modalList = _this.$parent.$parent.$parent.$children[0].$children[1].modelList;
                for (var i = 0; i < modalList.length; i++) {
                    if (type == modalList[i].type) {
                        return modalList[i].template_img;
                    }
                }
            }
        },
        getDataForExpression() {
            return this.dataSet.dataConfig.expression
        },
        isDisabled() {
            return (type, colId) => {
                if (type == 'gdl') {
                    return this.dataSet.dataConfig.indicator.findIndex(el => el.colId == colId) == -1
                }
                if (type == 'gdlAll') {
                    return this.dataSet.dataConfig.indicator.length < this.getDataForIndicator.length
                }
                if (type == 'dim') {
                    return this.dataSet.dataConfig.dimension.findIndex(el => el.colId == colId) == -1
                }
                if (type == 'dimAll') {
                    return this.dataSet.dataConfig.dimension.length < this.getDataForDimension.filter(el => el.clumType != 'group').length
                }
                return false;
            }
        },
        getDropTreeData(dims) {
            // if(!this.dimensionOptionSession[this.filtersConfig.filterItem.dimId+'_'+this.filtersConfig.filterItem.dimLevel]){return []}
            let _arr = [];
            // let dims = this.dimensionOptionSession[this.filtersConfig.filterItem.dimId+'_'+this.filtersConfig.filterItem.dimLevel];
            if (!!dims) {
                dims.forEach(item => {
                    if (!item.isLeaf) { item.children = [] }
                    _arr.push(item)
                })
                return _arr;
            }

        },
        getNextDimParams() {
            return function (val) {
                return {
                    userId: this.chartDatas.userId,
                    dataSetId: this.chartDatas.currentModel.options.setData.dataConfig.dataSetId,
                    dimLevelId: val
                }
            }
        },
        ifShowParamsConfig() {
            let tableType = this.dataSet.dataConfig.dataSetInfo.tableType;
            let varMap = this.dataSet.dataConfig.varNameMap;
            return tableType == 1 && varMap && JSON.stringify(varMap) != "{}"
        },
        /**
         * 拿到当前数据集能用的动态参数key
         */
        getDynamicParams() {
            let varNameMap = this.chartDatas.currentModel.options.setData.dataConfig.varNameMap;
            let _arr = []
            for (let key in varNameMap) {
                _arr.push({ value: key, label: varNameMap[key].name })
            }
            return _arr;
        },
        getGroupbyIcon() {
            return (item) => {
                return item['groupBy'] ? 'el-icon-success' : 'el-icon-circle-check'
            }
        }

    }
}
</script>
<style scoped>
.colSelect {
    width: 320px;
}

.colSelect-title {
    font-size: 14px;
    font-weight: 500;
    border-bottom: 1px solid #d9d9d9;
}

.colSelect>.param-box {
    padding: 20px 15px;
}
.colSelect>.param-beizhu {
    padding: 10px;
}

.colSelect>.param-box>.param-label,.colSelect>.param-box>.param-value {
    display: inline-block;
    padding-left:10px;
}
</style>
<style scoped>
.moduleDataSet {
    height: 100%;
    font-size: 12px;
    color: #eee;
}

.change-input-icon>>>.el-input__icon {
    display: flex;
    align-items: center;
}

.moduleDataSet .el-input__inner {
    background-color: #14181e;
    color: #fff;
}

.dataSetList i,
.filterField i {
    font-size: 16px;
    color: #a0b0cb;
    cursor: pointer;
}

.moduleDataSet .selected,
.moduleDataSet .optional {
    flex: 1;
    box-sizing: border-box;
    padding: 0 10px;
    width: 225px;
    height: 100%;
    overflow-y: auto;
}

.moduleDataSet .selected {
    border-right: 1px dotted #475c80;
}

.selectScroll {
    height: calc(100% - 168px);
    overflow-x: hidden;
    overflow-y: auto;
}

.selectScroll:hover {
    box-shadow: 0px 0px 5px #0b244c;
}

.confirm {
    bottom: 0;
    width: 100%;
    left: 0;
    height: 120px;

}

.classes {
    padding: 8px 0;
    border-bottom: 1px dotted #475c80;
}

.classesName {
    line-height: 32px;
}

.classesName .right-tools {
    color: #3f9eff
}

.right-tools .icon-btn {
    cursor: pointer;
}

.classesContainer {
    min-height: 30px;
}

.defaultText {
    box-sizing: border-box;
    width: 100%;
    height: 28px;
    line-height: 26px;
    border: 1px dotted rgba(255, 255, 255, .1);
    background: rgba(255, 255, 255, .1);
    z-index: 0;
}

.selectedList {
    z-index: 0;
}

.selectedList li {
    height: 28px;
    line-height: 26px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
    border-width: 1px;
    border-style: solid;
    margin-bottom: 6px;
    font-size: 0;
}

.selectedList .icon {
    margin-left: 10px;
    font-size: 16px;
}

.selectedList .clumSetOut {
    position: absolute;
    right: 2px;
    top: 0px;
    height: 26px;
    font-size: 0;
}

.selectedList .clumSetOut i {
    margin-left: 6px;
    font-size: 16px;
    vertical-align: middle;
    cursor: pointer;
}

.optional .classesName {
    padding-top: 4px;
}

.clumName {
    font-size: 12px;
    margin-left: 6px;
    display: inline-block;
    white-space: nowrap;
    width: 140px;
    overflow: hidden;
    text-overflow: ellipsis;
}

.clumName2 {
    font-size: 12px;
    margin-left: 6px;
    display: inline-block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.clumName3 {
    font-size: 12px;
    margin-left: 6px;
    display: inline-block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.clumName4 {
    font-size: 12px;
    margin-left: 6px;
    display: inline-block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.selectedList .clumName {
    width: 100px;
}

.selectedList .clumName3 {
    width: 60px;
}

.selectedList .clumName4 {
    width: 140px;
}

.selectedList .clumName2 {
    width: 140px;
}

.sqlClum {
    position: relative;
    border-color: #468cff;
    background: #284067;
}

.dimension {
    position: relative;
    border-color: #468cff;
    background: #284067;
}

.dimension .icon {
    color: #468cff;
    font-size: 12px;
}

.indicator,
.expression {
    position: relative;
    border-color: #2bc048;
    background: #265930;
}

.indicator .icon {
    color: #2bc048;
    font-size: 12px;
}

.filterField {
    height: 36px;
    padding-top: 3px;
    border-bottom: 1px dotted #475c80;
}

.filterKey {
    border: none;
    background: transparent;
    outline: none;
    height: 32px;
    padding: 4px 6px;
    line-height: 24px;
    color: #fff;
    width: 168px;
}

.handle {
    height: 4px;
    overflow: hidden;
    border-width: 1px 0;
    border-style: solid;
    border-color: #43587c;
    font-size: 0;
}

.handle i {
    display: inline-block;
    height: 4px;
    width: 20px;
    background: #647593;
    cursor: row-resize;
}

.showFields {
    height: calc(100% - 140px);
    overflow: hidden;
}

.fieldsList {
    width: 100%;
    height: calc(50% - 3px);
}

.outList div[name="outListItem"],
.outList div[name="outListGroup"] {
    height: 22px;
    line-height: 22px;
    border: 1px solid transparent;
    margin-bottom: 2px;
    background: transparent;
    margin-left: 10px;
    padding-left: 6px;
}

.outList div[name="outListItem"]:hover {
    border: 1px solid #475c80;
}

.outList div[name="outListGroup"] {
    cursor: pointer;
}

.outList div[name="outListGroup"] .clumName {
    color: #c5c5c5;
}

.overlayer {
    display: none;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    z-index: 2;
}

.overlayer.show {
    display: block;
}

.el-icon-files.configured,
.configured {
    color: #00ff0f;
}

.current {
    color: #ff5252;
    background: #dcd1d1;
}

.el-icon-files {
    color: #eee;
}

.filterFieldList,
.filterConfigList {
    /*border:1px solid #d6d6d6;*/
    height: 100%;
    overflow-y: auto;
    box-sizing: border-box;
}

.filterFieldList {
    border-right: 1px solid #ddd;
}

.popFieldLists {
    background: #f9f9f9;
}

.popFieldLists li {
    line-height: 24px;
    cursor: pointer;
    padding-left: 16px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.popFieldLists li:hover {
    background: #f0f0f0;
}

.popFieldLists li.active {
    background: #d8f1fa;
}

.cfrow {
    line-height: 32px;
}

.activeFileClass {
    background: black !important;
}

.popFieldHead {
    line-height: 32px;
    display: block;
    border-bottom: 1px solid #ddd;
}

.clumsFilterClass {
    padding: 10px;
    margin-bottom: 5px;
    border-bottom: 1px solid #eaeaea
}

.drillUl:not(:last-child) {
    margin-bottom: 6px;
    border-bottom: 1px dotted #4d86e3;
}

.selfFilterOptionDiv {
    width: 320px;
    padding: 5px;
    border-radius: 4px;
    /* background: red; */
    margin-top: 5px;
    padding: 5px;
    height: 270px;
    /* background: #fbfbfb; */
    border: 1px solid #eae4e4;
}

.selfFilterOptionDivItem {
    width: 340px;
    background: #f3eaea;
    height: 30px;
    text-align: left;
    padding: 2px;
    line-height: 30px;
    border-radius: 4px;
}

.selfFilterOptionDivItemDisplay {
    display: inline-block;
    width: 47%;
    background: #f7efef;
    height: 210px;
    border-radius: 4px;
}

.fileSearchInput {
    background: transparent !important;
    color: #000 !important;
    border-color: #e1e4e8 !important;
}

.iconbtn {
    cursor: pointer;
}

.iconbtn:hover {
    color: #3A90F8
}

.iconbtn.el-icon-delete:hover {
    color: red
}

.fileBox {
    display: inline-block;
    position: relative;
    font-size: 12px;
    width: 175px;
    border: 2px solid #eaeaea66;
    box-sizing: border-box;
    height: 150px;
    padding: 5px;
    margin: 0 0 7px 7px;
    cursor: pointer;
    overflow: hidden
}

.fileBox:hover {
    border-color: #2bc048
}

.fileBox:hover .controlBox {
    opacity: 1
}

.fileBox .checkBox {
    display: none;
    width: 60px;
    z-index: 9;
    height: 60px;
    position: absolute;
    background-color: #2bc048;
    color: #fff;
    transform: rotate(40deg);
    border-color: #2bc048;
    top: -41px;
    right: -26px;
    text-align: right;
    padding-right: 8px;
    box-sizing: border-box;
}

.fileBox .checkBox i {
    font-size: 16px;
    font-weight: bold;
    line-height: 125px;
    transform: rotate(320deg);
    display: block;
    z-index: 9;
}

.fileBox .controlBox {
    position: absolute;
    display: flex;
    justify-content: space-between;
    width: 100%;
    height: 100%;
    opacity: 0;
    z-index: 1;
    background-color: #00000055;
    top: 0;
    left: 0;
    font-size: 0
}

.controlBox .controlIcon {
    width: 100%;
    display: inline-block;
    text-align: center;
    line-height: 146px;
    vertical-align: top;
    color: #ccc;
    cursor: pointer;
}

.controlBox .controlTools {
    z-index: 2;
    left: 0;
    top: 0;
    background: #bcffc9;
    float: left;
    height: 20px;
}

.controlBox .controlTools i {
    display: inline-block;
    width: 20px;
    height: 20px;
    color: #128f2a;
    font-size: 14px;
    line-height: 20px;
    text-align: center;
}

.controlBox .controlTools i:hover {
    background: #08ed34;
    color: #ff4e4e;
}

.controlBox .controlIcon i {
    display: inline-block;
    /*font-size: 36px;*/
}

.controlBox .controlIcon i .el-icon-delete {
    font-size: 30px
}

.controlBox .controlIcon:hover i {
    color: #fff
}

.fileBox.active {
    border-color: #2bc048
}

.fileBox.active .checkBox {
    display: block
}

.fileBox .fileIcon {
    height: 110px;
    line-height: 120px;
    background-color: rgb(255, 135, 70);
    color: #fff;
    line-height: 110px;
    text-align: center;
}

.fileBox.blue .fileIcon {
    background-color: rgb(0, 186, 255)
}

.fileBox .fileIcon i {
    font-size: 54px
}

.fileBox p {
    line-height: 30px;
    padding: 0 10px
}

.fileNameSpan {
    overflow: hidden;
    text-overflow: ellipsis;
    -o-text-overflow: ellipsis;
    white-space: nowrap;
}

.flexBox {
    display: flex;
    justify-content: space-between
}

.flexBox.start {
    justify-content: flex-start;
}

.flexBox.start>.nameBox {
    width: 80%;
}

.flexBox.start>.config-box>i {
    cursor: pointer;
}

.alignLeft {
    justify-content: flex-start;
}

.alignRight {
    justify-content: flex-end;
    padding-right: 5px
}

.groupBox {
    width: 100%
}

.titleIcon {
    font-size: 12px;
    color: #3A90F8
}

.titleIcon.el-icon-data-analysis {
    color: #2bc048
}

.selectScroll::-webkit-scrollbar {
    width: 6px;
    height: 6px;
}

.selectScroll::-webkit-scrollbar-thumb {
    width: 6px;
    height: 6px;
    border-radius: 4px;
    background: transparent;
}

.selectScroll::-webkit-scrollbar-track {
    background-color: rgba(0, 0, 0, 0);
}

.selectScroll:hover::-webkit-scrollbar-thumb {
    background: #7888ab
}

.selectScroll:hover::-webkit-scrollbar-track {
    background-color: rgba(0, 0, 0, .04);
}

.filterList {
    padding-top: 10px
}

.filterList li {
    line-height: 24px;
    border: 1px solid transparent;
    box-sizing: border-box;
    cursor: pointer;
    padding: 0 5px;
    font-size: 12px;
    margin-top: 5px
}

.filterList li:not(.filterItemActive):hover {
    background-color: #eaeaea99
}

.filterList li .colIcon {
    font-size: 12px;
    margin-right: 10px;
    color: #2bc048
}

.filterList .dimLi .colIcon {
    color: #3A90F8
}

.filterList li.filterItemActive {
    border-color: #2bc048;
    background-color: #2bc04833
}

.filterList .dimLi.filterItemActive {
    border-color: #3A90F8;
    background-color: #3A90F833
}

.iconBox,
.iconBox .icon {
    width: 18px;
    height: 18px
}

.iconBox {
    margin-right: 10px;
    line-height: 34px
}

.groupSelected {
    display: inline-block;
    border: 1px solid #00c600;
    color: #0f0;
    height: 16px;
    width: 38px;
    font-size: 12px !important;
    line-height: 16px;
}

.groupSelected2 {
    display: inline-block;
    border: 1px solid #3B84F8;
    color: #5795fb;
    height: 16px;
    width: 38px;
    font-size: 12px !important;
    line-height: 16px;
}

.sqlViewTxt {
    width: 180px;
    margin-top: 10px;
}

.outList {
    height: calc(100% - 35px);
    overflow-y: auto;
}

/deep/ .fieldsList .el-checkbox {
    margin-right: 3px;
    vertical-align: bottom;
}

/deep/ .fieldsList .el-checkbox__inner {
    width: 12px !important;
    height: 12px !important;
    color: #FFFFFF;
}

/deep/ .fieldsList .el-checkbox__input.is-disabled .el-checkbox__inner {
    background-color: #edf2fc;
    border-color: #DCDFE6;
    cursor: not-allowed;
}

/deep/ .fieldsList .el-checkbox__inner::after {
    height: 5px !important;
    left: 3px !important;
}

/deep/ .dimension .el-checkbox__label {
    padding-left: 0px !important;
}

/deep/ .indicator .el-checkbox__label {
    padding-left: 0px !important;
}
.noChange >>> .el-input__inner{
    text-align: left;
}
</style>
